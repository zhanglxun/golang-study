// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golangStudy/2.web/8.ent/ent/cwebsite"
	"golangStudy/2.web/8.ent/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CWebsiteUpdate is the builder for updating CWebsite entities.
type CWebsiteUpdate struct {
	config
	hooks    []Hook
	mutation *CWebsiteMutation
}

// Where appends a list predicates to the CWebsiteUpdate builder.
func (cu *CWebsiteUpdate) Where(ps ...predicate.CWebsite) *CWebsiteUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetSortID sets the "sort_id" field.
func (cu *CWebsiteUpdate) SetSortID(i int32) *CWebsiteUpdate {
	cu.mutation.ResetSortID()
	cu.mutation.SetSortID(i)
	return cu
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableSortID(i *int32) *CWebsiteUpdate {
	if i != nil {
		cu.SetSortID(*i)
	}
	return cu
}

// AddSortID adds i to the "sort_id" field.
func (cu *CWebsiteUpdate) AddSortID(i int32) *CWebsiteUpdate {
	cu.mutation.AddSortID(i)
	return cu
}

// ClearSortID clears the value of the "sort_id" field.
func (cu *CWebsiteUpdate) ClearSortID() *CWebsiteUpdate {
	cu.mutation.ClearSortID()
	return cu
}

// SetCategory sets the "category" field.
func (cu *CWebsiteUpdate) SetCategory(i int32) *CWebsiteUpdate {
	cu.mutation.ResetCategory()
	cu.mutation.SetCategory(i)
	return cu
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableCategory(i *int32) *CWebsiteUpdate {
	if i != nil {
		cu.SetCategory(*i)
	}
	return cu
}

// AddCategory adds i to the "category" field.
func (cu *CWebsiteUpdate) AddCategory(i int32) *CWebsiteUpdate {
	cu.mutation.AddCategory(i)
	return cu
}

// ClearCategory clears the value of the "category" field.
func (cu *CWebsiteUpdate) ClearCategory() *CWebsiteUpdate {
	cu.mutation.ClearCategory()
	return cu
}

// SetType sets the "type" field.
func (cu *CWebsiteUpdate) SetType(i int32) *CWebsiteUpdate {
	cu.mutation.ResetType()
	cu.mutation.SetType(i)
	return cu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableType(i *int32) *CWebsiteUpdate {
	if i != nil {
		cu.SetType(*i)
	}
	return cu
}

// AddType adds i to the "type" field.
func (cu *CWebsiteUpdate) AddType(i int32) *CWebsiteUpdate {
	cu.mutation.AddType(i)
	return cu
}

// ClearType clears the value of the "type" field.
func (cu *CWebsiteUpdate) ClearType() *CWebsiteUpdate {
	cu.mutation.ClearType()
	return cu
}

// SetWebsiteName sets the "website_name" field.
func (cu *CWebsiteUpdate) SetWebsiteName(s string) *CWebsiteUpdate {
	cu.mutation.SetWebsiteName(s)
	return cu
}

// SetNillableWebsiteName sets the "website_name" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableWebsiteName(s *string) *CWebsiteUpdate {
	if s != nil {
		cu.SetWebsiteName(*s)
	}
	return cu
}

// ClearWebsiteName clears the value of the "website_name" field.
func (cu *CWebsiteUpdate) ClearWebsiteName() *CWebsiteUpdate {
	cu.mutation.ClearWebsiteName()
	return cu
}

// SetWebsiteIcon sets the "website_icon" field.
func (cu *CWebsiteUpdate) SetWebsiteIcon(s string) *CWebsiteUpdate {
	cu.mutation.SetWebsiteIcon(s)
	return cu
}

// SetNillableWebsiteIcon sets the "website_icon" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableWebsiteIcon(s *string) *CWebsiteUpdate {
	if s != nil {
		cu.SetWebsiteIcon(*s)
	}
	return cu
}

// ClearWebsiteIcon clears the value of the "website_icon" field.
func (cu *CWebsiteUpdate) ClearWebsiteIcon() *CWebsiteUpdate {
	cu.mutation.ClearWebsiteIcon()
	return cu
}

// SetWebsiteURL sets the "website_url" field.
func (cu *CWebsiteUpdate) SetWebsiteURL(s string) *CWebsiteUpdate {
	cu.mutation.SetWebsiteURL(s)
	return cu
}

// SetNillableWebsiteURL sets the "website_url" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableWebsiteURL(s *string) *CWebsiteUpdate {
	if s != nil {
		cu.SetWebsiteURL(*s)
	}
	return cu
}

// ClearWebsiteURL clears the value of the "website_url" field.
func (cu *CWebsiteUpdate) ClearWebsiteURL() *CWebsiteUpdate {
	cu.mutation.ClearWebsiteURL()
	return cu
}

// SetSummary sets the "summary" field.
func (cu *CWebsiteUpdate) SetSummary(s string) *CWebsiteUpdate {
	cu.mutation.SetSummary(s)
	return cu
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableSummary(s *string) *CWebsiteUpdate {
	if s != nil {
		cu.SetSummary(*s)
	}
	return cu
}

// ClearSummary clears the value of the "summary" field.
func (cu *CWebsiteUpdate) ClearSummary() *CWebsiteUpdate {
	cu.mutation.ClearSummary()
	return cu
}

// SetDescription sets the "description" field.
func (cu *CWebsiteUpdate) SetDescription(s string) *CWebsiteUpdate {
	cu.mutation.SetDescription(s)
	return cu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableDescription(s *string) *CWebsiteUpdate {
	if s != nil {
		cu.SetDescription(*s)
	}
	return cu
}

// ClearDescription clears the value of the "description" field.
func (cu *CWebsiteUpdate) ClearDescription() *CWebsiteUpdate {
	cu.mutation.ClearDescription()
	return cu
}

// SetCreateID sets the "create_id" field.
func (cu *CWebsiteUpdate) SetCreateID(i int64) *CWebsiteUpdate {
	cu.mutation.ResetCreateID()
	cu.mutation.SetCreateID(i)
	return cu
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableCreateID(i *int64) *CWebsiteUpdate {
	if i != nil {
		cu.SetCreateID(*i)
	}
	return cu
}

// AddCreateID adds i to the "create_id" field.
func (cu *CWebsiteUpdate) AddCreateID(i int64) *CWebsiteUpdate {
	cu.mutation.AddCreateID(i)
	return cu
}

// ClearCreateID clears the value of the "create_id" field.
func (cu *CWebsiteUpdate) ClearCreateID() *CWebsiteUpdate {
	cu.mutation.ClearCreateID()
	return cu
}

// SetCreateTime sets the "create_time" field.
func (cu *CWebsiteUpdate) SetCreateTime(t time.Time) *CWebsiteUpdate {
	cu.mutation.SetCreateTime(t)
	return cu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableCreateTime(t *time.Time) *CWebsiteUpdate {
	if t != nil {
		cu.SetCreateTime(*t)
	}
	return cu
}

// ClearCreateTime clears the value of the "create_time" field.
func (cu *CWebsiteUpdate) ClearCreateTime() *CWebsiteUpdate {
	cu.mutation.ClearCreateTime()
	return cu
}

// SetModifyID sets the "modify_id" field.
func (cu *CWebsiteUpdate) SetModifyID(i int64) *CWebsiteUpdate {
	cu.mutation.ResetModifyID()
	cu.mutation.SetModifyID(i)
	return cu
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableModifyID(i *int64) *CWebsiteUpdate {
	if i != nil {
		cu.SetModifyID(*i)
	}
	return cu
}

// AddModifyID adds i to the "modify_id" field.
func (cu *CWebsiteUpdate) AddModifyID(i int64) *CWebsiteUpdate {
	cu.mutation.AddModifyID(i)
	return cu
}

// ClearModifyID clears the value of the "modify_id" field.
func (cu *CWebsiteUpdate) ClearModifyID() *CWebsiteUpdate {
	cu.mutation.ClearModifyID()
	return cu
}

// SetModifyTime sets the "modify_time" field.
func (cu *CWebsiteUpdate) SetModifyTime(t time.Time) *CWebsiteUpdate {
	cu.mutation.SetModifyTime(t)
	return cu
}

// SetNillableModifyTime sets the "modify_time" field if the given value is not nil.
func (cu *CWebsiteUpdate) SetNillableModifyTime(t *time.Time) *CWebsiteUpdate {
	if t != nil {
		cu.SetModifyTime(*t)
	}
	return cu
}

// ClearModifyTime clears the value of the "modify_time" field.
func (cu *CWebsiteUpdate) ClearModifyTime() *CWebsiteUpdate {
	cu.mutation.ClearModifyTime()
	return cu
}

// Mutation returns the CWebsiteMutation object of the builder.
func (cu *CWebsiteUpdate) Mutation() *CWebsiteMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CWebsiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, CWebsiteMutation](ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CWebsiteUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CWebsiteUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CWebsiteUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CWebsiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(cwebsite.Table, cwebsite.Columns, sqlgraph.NewFieldSpec(cwebsite.FieldID, field.TypeInt64))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.SortID(); ok {
		_spec.SetField(cwebsite.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedSortID(); ok {
		_spec.AddField(cwebsite.FieldSortID, field.TypeInt32, value)
	}
	if cu.mutation.SortIDCleared() {
		_spec.ClearField(cwebsite.FieldSortID, field.TypeInt32)
	}
	if value, ok := cu.mutation.Category(); ok {
		_spec.SetField(cwebsite.FieldCategory, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedCategory(); ok {
		_spec.AddField(cwebsite.FieldCategory, field.TypeInt32, value)
	}
	if cu.mutation.CategoryCleared() {
		_spec.ClearField(cwebsite.FieldCategory, field.TypeInt32)
	}
	if value, ok := cu.mutation.GetType(); ok {
		_spec.SetField(cwebsite.FieldType, field.TypeInt32, value)
	}
	if value, ok := cu.mutation.AddedType(); ok {
		_spec.AddField(cwebsite.FieldType, field.TypeInt32, value)
	}
	if cu.mutation.TypeCleared() {
		_spec.ClearField(cwebsite.FieldType, field.TypeInt32)
	}
	if value, ok := cu.mutation.WebsiteName(); ok {
		_spec.SetField(cwebsite.FieldWebsiteName, field.TypeString, value)
	}
	if cu.mutation.WebsiteNameCleared() {
		_spec.ClearField(cwebsite.FieldWebsiteName, field.TypeString)
	}
	if value, ok := cu.mutation.WebsiteIcon(); ok {
		_spec.SetField(cwebsite.FieldWebsiteIcon, field.TypeString, value)
	}
	if cu.mutation.WebsiteIconCleared() {
		_spec.ClearField(cwebsite.FieldWebsiteIcon, field.TypeString)
	}
	if value, ok := cu.mutation.WebsiteURL(); ok {
		_spec.SetField(cwebsite.FieldWebsiteURL, field.TypeString, value)
	}
	if cu.mutation.WebsiteURLCleared() {
		_spec.ClearField(cwebsite.FieldWebsiteURL, field.TypeString)
	}
	if value, ok := cu.mutation.Summary(); ok {
		_spec.SetField(cwebsite.FieldSummary, field.TypeString, value)
	}
	if cu.mutation.SummaryCleared() {
		_spec.ClearField(cwebsite.FieldSummary, field.TypeString)
	}
	if value, ok := cu.mutation.Description(); ok {
		_spec.SetField(cwebsite.FieldDescription, field.TypeString, value)
	}
	if cu.mutation.DescriptionCleared() {
		_spec.ClearField(cwebsite.FieldDescription, field.TypeString)
	}
	if value, ok := cu.mutation.CreateID(); ok {
		_spec.SetField(cwebsite.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCreateID(); ok {
		_spec.AddField(cwebsite.FieldCreateID, field.TypeInt64, value)
	}
	if cu.mutation.CreateIDCleared() {
		_spec.ClearField(cwebsite.FieldCreateID, field.TypeInt64)
	}
	if value, ok := cu.mutation.CreateTime(); ok {
		_spec.SetField(cwebsite.FieldCreateTime, field.TypeTime, value)
	}
	if cu.mutation.CreateTimeCleared() {
		_spec.ClearField(cwebsite.FieldCreateTime, field.TypeTime)
	}
	if value, ok := cu.mutation.ModifyID(); ok {
		_spec.SetField(cwebsite.FieldModifyID, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedModifyID(); ok {
		_spec.AddField(cwebsite.FieldModifyID, field.TypeInt64, value)
	}
	if cu.mutation.ModifyIDCleared() {
		_spec.ClearField(cwebsite.FieldModifyID, field.TypeInt64)
	}
	if value, ok := cu.mutation.ModifyTime(); ok {
		_spec.SetField(cwebsite.FieldModifyTime, field.TypeTime, value)
	}
	if cu.mutation.ModifyTimeCleared() {
		_spec.ClearField(cwebsite.FieldModifyTime, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cwebsite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CWebsiteUpdateOne is the builder for updating a single CWebsite entity.
type CWebsiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CWebsiteMutation
}

// SetSortID sets the "sort_id" field.
func (cuo *CWebsiteUpdateOne) SetSortID(i int32) *CWebsiteUpdateOne {
	cuo.mutation.ResetSortID()
	cuo.mutation.SetSortID(i)
	return cuo
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableSortID(i *int32) *CWebsiteUpdateOne {
	if i != nil {
		cuo.SetSortID(*i)
	}
	return cuo
}

// AddSortID adds i to the "sort_id" field.
func (cuo *CWebsiteUpdateOne) AddSortID(i int32) *CWebsiteUpdateOne {
	cuo.mutation.AddSortID(i)
	return cuo
}

// ClearSortID clears the value of the "sort_id" field.
func (cuo *CWebsiteUpdateOne) ClearSortID() *CWebsiteUpdateOne {
	cuo.mutation.ClearSortID()
	return cuo
}

// SetCategory sets the "category" field.
func (cuo *CWebsiteUpdateOne) SetCategory(i int32) *CWebsiteUpdateOne {
	cuo.mutation.ResetCategory()
	cuo.mutation.SetCategory(i)
	return cuo
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableCategory(i *int32) *CWebsiteUpdateOne {
	if i != nil {
		cuo.SetCategory(*i)
	}
	return cuo
}

// AddCategory adds i to the "category" field.
func (cuo *CWebsiteUpdateOne) AddCategory(i int32) *CWebsiteUpdateOne {
	cuo.mutation.AddCategory(i)
	return cuo
}

// ClearCategory clears the value of the "category" field.
func (cuo *CWebsiteUpdateOne) ClearCategory() *CWebsiteUpdateOne {
	cuo.mutation.ClearCategory()
	return cuo
}

// SetType sets the "type" field.
func (cuo *CWebsiteUpdateOne) SetType(i int32) *CWebsiteUpdateOne {
	cuo.mutation.ResetType()
	cuo.mutation.SetType(i)
	return cuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableType(i *int32) *CWebsiteUpdateOne {
	if i != nil {
		cuo.SetType(*i)
	}
	return cuo
}

// AddType adds i to the "type" field.
func (cuo *CWebsiteUpdateOne) AddType(i int32) *CWebsiteUpdateOne {
	cuo.mutation.AddType(i)
	return cuo
}

// ClearType clears the value of the "type" field.
func (cuo *CWebsiteUpdateOne) ClearType() *CWebsiteUpdateOne {
	cuo.mutation.ClearType()
	return cuo
}

// SetWebsiteName sets the "website_name" field.
func (cuo *CWebsiteUpdateOne) SetWebsiteName(s string) *CWebsiteUpdateOne {
	cuo.mutation.SetWebsiteName(s)
	return cuo
}

// SetNillableWebsiteName sets the "website_name" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableWebsiteName(s *string) *CWebsiteUpdateOne {
	if s != nil {
		cuo.SetWebsiteName(*s)
	}
	return cuo
}

// ClearWebsiteName clears the value of the "website_name" field.
func (cuo *CWebsiteUpdateOne) ClearWebsiteName() *CWebsiteUpdateOne {
	cuo.mutation.ClearWebsiteName()
	return cuo
}

// SetWebsiteIcon sets the "website_icon" field.
func (cuo *CWebsiteUpdateOne) SetWebsiteIcon(s string) *CWebsiteUpdateOne {
	cuo.mutation.SetWebsiteIcon(s)
	return cuo
}

// SetNillableWebsiteIcon sets the "website_icon" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableWebsiteIcon(s *string) *CWebsiteUpdateOne {
	if s != nil {
		cuo.SetWebsiteIcon(*s)
	}
	return cuo
}

// ClearWebsiteIcon clears the value of the "website_icon" field.
func (cuo *CWebsiteUpdateOne) ClearWebsiteIcon() *CWebsiteUpdateOne {
	cuo.mutation.ClearWebsiteIcon()
	return cuo
}

// SetWebsiteURL sets the "website_url" field.
func (cuo *CWebsiteUpdateOne) SetWebsiteURL(s string) *CWebsiteUpdateOne {
	cuo.mutation.SetWebsiteURL(s)
	return cuo
}

// SetNillableWebsiteURL sets the "website_url" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableWebsiteURL(s *string) *CWebsiteUpdateOne {
	if s != nil {
		cuo.SetWebsiteURL(*s)
	}
	return cuo
}

// ClearWebsiteURL clears the value of the "website_url" field.
func (cuo *CWebsiteUpdateOne) ClearWebsiteURL() *CWebsiteUpdateOne {
	cuo.mutation.ClearWebsiteURL()
	return cuo
}

// SetSummary sets the "summary" field.
func (cuo *CWebsiteUpdateOne) SetSummary(s string) *CWebsiteUpdateOne {
	cuo.mutation.SetSummary(s)
	return cuo
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableSummary(s *string) *CWebsiteUpdateOne {
	if s != nil {
		cuo.SetSummary(*s)
	}
	return cuo
}

// ClearSummary clears the value of the "summary" field.
func (cuo *CWebsiteUpdateOne) ClearSummary() *CWebsiteUpdateOne {
	cuo.mutation.ClearSummary()
	return cuo
}

// SetDescription sets the "description" field.
func (cuo *CWebsiteUpdateOne) SetDescription(s string) *CWebsiteUpdateOne {
	cuo.mutation.SetDescription(s)
	return cuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableDescription(s *string) *CWebsiteUpdateOne {
	if s != nil {
		cuo.SetDescription(*s)
	}
	return cuo
}

// ClearDescription clears the value of the "description" field.
func (cuo *CWebsiteUpdateOne) ClearDescription() *CWebsiteUpdateOne {
	cuo.mutation.ClearDescription()
	return cuo
}

// SetCreateID sets the "create_id" field.
func (cuo *CWebsiteUpdateOne) SetCreateID(i int64) *CWebsiteUpdateOne {
	cuo.mutation.ResetCreateID()
	cuo.mutation.SetCreateID(i)
	return cuo
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableCreateID(i *int64) *CWebsiteUpdateOne {
	if i != nil {
		cuo.SetCreateID(*i)
	}
	return cuo
}

// AddCreateID adds i to the "create_id" field.
func (cuo *CWebsiteUpdateOne) AddCreateID(i int64) *CWebsiteUpdateOne {
	cuo.mutation.AddCreateID(i)
	return cuo
}

// ClearCreateID clears the value of the "create_id" field.
func (cuo *CWebsiteUpdateOne) ClearCreateID() *CWebsiteUpdateOne {
	cuo.mutation.ClearCreateID()
	return cuo
}

// SetCreateTime sets the "create_time" field.
func (cuo *CWebsiteUpdateOne) SetCreateTime(t time.Time) *CWebsiteUpdateOne {
	cuo.mutation.SetCreateTime(t)
	return cuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableCreateTime(t *time.Time) *CWebsiteUpdateOne {
	if t != nil {
		cuo.SetCreateTime(*t)
	}
	return cuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (cuo *CWebsiteUpdateOne) ClearCreateTime() *CWebsiteUpdateOne {
	cuo.mutation.ClearCreateTime()
	return cuo
}

// SetModifyID sets the "modify_id" field.
func (cuo *CWebsiteUpdateOne) SetModifyID(i int64) *CWebsiteUpdateOne {
	cuo.mutation.ResetModifyID()
	cuo.mutation.SetModifyID(i)
	return cuo
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableModifyID(i *int64) *CWebsiteUpdateOne {
	if i != nil {
		cuo.SetModifyID(*i)
	}
	return cuo
}

// AddModifyID adds i to the "modify_id" field.
func (cuo *CWebsiteUpdateOne) AddModifyID(i int64) *CWebsiteUpdateOne {
	cuo.mutation.AddModifyID(i)
	return cuo
}

// ClearModifyID clears the value of the "modify_id" field.
func (cuo *CWebsiteUpdateOne) ClearModifyID() *CWebsiteUpdateOne {
	cuo.mutation.ClearModifyID()
	return cuo
}

// SetModifyTime sets the "modify_time" field.
func (cuo *CWebsiteUpdateOne) SetModifyTime(t time.Time) *CWebsiteUpdateOne {
	cuo.mutation.SetModifyTime(t)
	return cuo
}

// SetNillableModifyTime sets the "modify_time" field if the given value is not nil.
func (cuo *CWebsiteUpdateOne) SetNillableModifyTime(t *time.Time) *CWebsiteUpdateOne {
	if t != nil {
		cuo.SetModifyTime(*t)
	}
	return cuo
}

// ClearModifyTime clears the value of the "modify_time" field.
func (cuo *CWebsiteUpdateOne) ClearModifyTime() *CWebsiteUpdateOne {
	cuo.mutation.ClearModifyTime()
	return cuo
}

// Mutation returns the CWebsiteMutation object of the builder.
func (cuo *CWebsiteUpdateOne) Mutation() *CWebsiteMutation {
	return cuo.mutation
}

// Where appends a list predicates to the CWebsiteUpdate builder.
func (cuo *CWebsiteUpdateOne) Where(ps ...predicate.CWebsite) *CWebsiteUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CWebsiteUpdateOne) Select(field string, fields ...string) *CWebsiteUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated CWebsite entity.
func (cuo *CWebsiteUpdateOne) Save(ctx context.Context) (*CWebsite, error) {
	return withHooks[*CWebsite, CWebsiteMutation](ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CWebsiteUpdateOne) SaveX(ctx context.Context) *CWebsite {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CWebsiteUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CWebsiteUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CWebsiteUpdateOne) sqlSave(ctx context.Context) (_node *CWebsite, err error) {
	_spec := sqlgraph.NewUpdateSpec(cwebsite.Table, cwebsite.Columns, sqlgraph.NewFieldSpec(cwebsite.FieldID, field.TypeInt64))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "CWebsite.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cwebsite.FieldID)
		for _, f := range fields {
			if !cwebsite.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cwebsite.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.SortID(); ok {
		_spec.SetField(cwebsite.FieldSortID, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedSortID(); ok {
		_spec.AddField(cwebsite.FieldSortID, field.TypeInt32, value)
	}
	if cuo.mutation.SortIDCleared() {
		_spec.ClearField(cwebsite.FieldSortID, field.TypeInt32)
	}
	if value, ok := cuo.mutation.Category(); ok {
		_spec.SetField(cwebsite.FieldCategory, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedCategory(); ok {
		_spec.AddField(cwebsite.FieldCategory, field.TypeInt32, value)
	}
	if cuo.mutation.CategoryCleared() {
		_spec.ClearField(cwebsite.FieldCategory, field.TypeInt32)
	}
	if value, ok := cuo.mutation.GetType(); ok {
		_spec.SetField(cwebsite.FieldType, field.TypeInt32, value)
	}
	if value, ok := cuo.mutation.AddedType(); ok {
		_spec.AddField(cwebsite.FieldType, field.TypeInt32, value)
	}
	if cuo.mutation.TypeCleared() {
		_spec.ClearField(cwebsite.FieldType, field.TypeInt32)
	}
	if value, ok := cuo.mutation.WebsiteName(); ok {
		_spec.SetField(cwebsite.FieldWebsiteName, field.TypeString, value)
	}
	if cuo.mutation.WebsiteNameCleared() {
		_spec.ClearField(cwebsite.FieldWebsiteName, field.TypeString)
	}
	if value, ok := cuo.mutation.WebsiteIcon(); ok {
		_spec.SetField(cwebsite.FieldWebsiteIcon, field.TypeString, value)
	}
	if cuo.mutation.WebsiteIconCleared() {
		_spec.ClearField(cwebsite.FieldWebsiteIcon, field.TypeString)
	}
	if value, ok := cuo.mutation.WebsiteURL(); ok {
		_spec.SetField(cwebsite.FieldWebsiteURL, field.TypeString, value)
	}
	if cuo.mutation.WebsiteURLCleared() {
		_spec.ClearField(cwebsite.FieldWebsiteURL, field.TypeString)
	}
	if value, ok := cuo.mutation.Summary(); ok {
		_spec.SetField(cwebsite.FieldSummary, field.TypeString, value)
	}
	if cuo.mutation.SummaryCleared() {
		_spec.ClearField(cwebsite.FieldSummary, field.TypeString)
	}
	if value, ok := cuo.mutation.Description(); ok {
		_spec.SetField(cwebsite.FieldDescription, field.TypeString, value)
	}
	if cuo.mutation.DescriptionCleared() {
		_spec.ClearField(cwebsite.FieldDescription, field.TypeString)
	}
	if value, ok := cuo.mutation.CreateID(); ok {
		_spec.SetField(cwebsite.FieldCreateID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCreateID(); ok {
		_spec.AddField(cwebsite.FieldCreateID, field.TypeInt64, value)
	}
	if cuo.mutation.CreateIDCleared() {
		_spec.ClearField(cwebsite.FieldCreateID, field.TypeInt64)
	}
	if value, ok := cuo.mutation.CreateTime(); ok {
		_spec.SetField(cwebsite.FieldCreateTime, field.TypeTime, value)
	}
	if cuo.mutation.CreateTimeCleared() {
		_spec.ClearField(cwebsite.FieldCreateTime, field.TypeTime)
	}
	if value, ok := cuo.mutation.ModifyID(); ok {
		_spec.SetField(cwebsite.FieldModifyID, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedModifyID(); ok {
		_spec.AddField(cwebsite.FieldModifyID, field.TypeInt64, value)
	}
	if cuo.mutation.ModifyIDCleared() {
		_spec.ClearField(cwebsite.FieldModifyID, field.TypeInt64)
	}
	if value, ok := cuo.mutation.ModifyTime(); ok {
		_spec.SetField(cwebsite.FieldModifyTime, field.TypeTime, value)
	}
	if cuo.mutation.ModifyTimeCleared() {
		_spec.ClearField(cwebsite.FieldModifyTime, field.TypeTime)
	}
	_node = &CWebsite{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cwebsite.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
