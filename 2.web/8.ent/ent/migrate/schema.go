// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AccountsColumns holds the columns for the "accounts" table.
	AccountsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt32, Increment: true, SchemaType: map[string]string{"mysql": "int(20)"}},
		{Name: "account", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "pwd", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "nickname", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "email", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "mobile", Type: field.TypeString, SchemaType: map[string]string{"mysql": "varchar(255)"}},
	}
	// AccountsTable holds the schema information for the "accounts" table.
	AccountsTable = &schema.Table{
		Name:       "accounts",
		Columns:    AccountsColumns,
		PrimaryKey: []*schema.Column{AccountsColumns[0]},
	}
	// CWebsiteColumns holds the columns for the "c_website" table.
	CWebsiteColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt64, Increment: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "sort_id", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(8)"}},
		{Name: "category", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(2)"}},
		{Name: "type", Type: field.TypeInt32, Nullable: true, SchemaType: map[string]string{"mysql": "int(2)"}},
		{Name: "website_name", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "website_icon", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "website_url", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(255)"}},
		{Name: "summary", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(512)"}},
		{Name: "description", Type: field.TypeString, Nullable: true, SchemaType: map[string]string{"mysql": "varchar(1024)"}},
		{Name: "create_id", Type: field.TypeInt64, Nullable: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "create_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
		{Name: "modify_id", Type: field.TypeInt64, Nullable: true, SchemaType: map[string]string{"mysql": "bigint(20)"}},
		{Name: "modify_time", Type: field.TypeTime, Nullable: true, SchemaType: map[string]string{"mysql": "datetime"}},
	}
	// CWebsiteTable holds the schema information for the "c_website" table.
	CWebsiteTable = &schema.Table{
		Name:       "c_website",
		Columns:    CWebsiteColumns,
		PrimaryKey: []*schema.Column{CWebsiteColumns[0]},
	}
	// WebsiteColumns holds the columns for the "website" table.
	WebsiteColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt32, Increment: true},
		{Name: "sort_id", Type: field.TypeInt8},
		{Name: "category", Type: field.TypeInt8},
		{Name: "website_name", Type: field.TypeString},
		{Name: "website_icon", Type: field.TypeString},
		{Name: "website_url", Type: field.TypeString},
		{Name: "summary", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "create_id", Type: field.TypeString},
		{Name: "create_time", Type: field.TypeTime},
		{Name: "modify_id", Type: field.TypeString},
		{Name: "modify_time", Type: field.TypeTime},
	}
	// WebsiteTable holds the schema information for the "website" table.
	WebsiteTable = &schema.Table{
		Name:       "website",
		Columns:    WebsiteColumns,
		PrimaryKey: []*schema.Column{WebsiteColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AccountsTable,
		CWebsiteTable,
		WebsiteTable,
	}
)

func init() {
	CWebsiteTable.Annotation = &entsql.Annotation{
		Table: "c_website",
	}
	WebsiteTable.Annotation = &entsql.Annotation{
		Table: "website",
	}
}
