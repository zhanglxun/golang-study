// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golangStudy/2.web/8.ent/ent/accounts"
	"golangStudy/2.web/8.ent/ent/cwebsite"
	"golangStudy/2.web/8.ent/ent/predicate"
	"golangStudy/2.web/8.ent/ent/website"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccounts = "Accounts"
	TypeCWebsite = "CWebsite"
	TypeWebsite  = "Website"
)

// AccountsMutation represents an operation that mutates the Accounts nodes in the graph.
type AccountsMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	account       *string
	pwd           *string
	nickname      *string
	email         *string
	mobile        *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Accounts, error)
	predicates    []predicate.Accounts
}

var _ ent.Mutation = (*AccountsMutation)(nil)

// accountsOption allows management of the mutation configuration using functional options.
type accountsOption func(*AccountsMutation)

// newAccountsMutation creates new mutation for the Accounts entity.
func newAccountsMutation(c config, op Op, opts ...accountsOption) *AccountsMutation {
	m := &AccountsMutation{
		config:        c,
		op:            op,
		typ:           TypeAccounts,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountsID sets the ID field of the mutation.
func withAccountsID(id int32) accountsOption {
	return func(m *AccountsMutation) {
		var (
			err   error
			once  sync.Once
			value *Accounts
		)
		m.oldValue = func(ctx context.Context) (*Accounts, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Accounts.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccounts sets the old Accounts of the mutation.
func withAccounts(node *Accounts) accountsOption {
	return func(m *AccountsMutation) {
		m.oldValue = func(context.Context) (*Accounts, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Accounts entities.
func (m *AccountsMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountsMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountsMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Accounts.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAccount sets the "account" field.
func (m *AccountsMutation) SetAccount(s string) {
	m.account = &s
}

// Account returns the value of the "account" field in the mutation.
func (m *AccountsMutation) Account() (r string, exists bool) {
	v := m.account
	if v == nil {
		return
	}
	return *v, true
}

// OldAccount returns the old "account" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldAccount(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccount: %w", err)
	}
	return oldValue.Account, nil
}

// ResetAccount resets all changes to the "account" field.
func (m *AccountsMutation) ResetAccount() {
	m.account = nil
}

// SetPwd sets the "pwd" field.
func (m *AccountsMutation) SetPwd(s string) {
	m.pwd = &s
}

// Pwd returns the value of the "pwd" field in the mutation.
func (m *AccountsMutation) Pwd() (r string, exists bool) {
	v := m.pwd
	if v == nil {
		return
	}
	return *v, true
}

// OldPwd returns the old "pwd" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldPwd(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPwd is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPwd requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPwd: %w", err)
	}
	return oldValue.Pwd, nil
}

// ResetPwd resets all changes to the "pwd" field.
func (m *AccountsMutation) ResetPwd() {
	m.pwd = nil
}

// SetNickname sets the "nickname" field.
func (m *AccountsMutation) SetNickname(s string) {
	m.nickname = &s
}

// Nickname returns the value of the "nickname" field in the mutation.
func (m *AccountsMutation) Nickname() (r string, exists bool) {
	v := m.nickname
	if v == nil {
		return
	}
	return *v, true
}

// OldNickname returns the old "nickname" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldNickname(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNickname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNickname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNickname: %w", err)
	}
	return oldValue.Nickname, nil
}

// ResetNickname resets all changes to the "nickname" field.
func (m *AccountsMutation) ResetNickname() {
	m.nickname = nil
}

// SetEmail sets the "email" field.
func (m *AccountsMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *AccountsMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *AccountsMutation) ResetEmail() {
	m.email = nil
}

// SetMobile sets the "mobile" field.
func (m *AccountsMutation) SetMobile(s string) {
	m.mobile = &s
}

// Mobile returns the value of the "mobile" field in the mutation.
func (m *AccountsMutation) Mobile() (r string, exists bool) {
	v := m.mobile
	if v == nil {
		return
	}
	return *v, true
}

// OldMobile returns the old "mobile" field's value of the Accounts entity.
// If the Accounts object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountsMutation) OldMobile(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMobile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMobile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMobile: %w", err)
	}
	return oldValue.Mobile, nil
}

// ResetMobile resets all changes to the "mobile" field.
func (m *AccountsMutation) ResetMobile() {
	m.mobile = nil
}

// Where appends a list predicates to the AccountsMutation builder.
func (m *AccountsMutation) Where(ps ...predicate.Accounts) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AccountsMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AccountsMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Accounts, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AccountsMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AccountsMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Accounts).
func (m *AccountsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountsMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.account != nil {
		fields = append(fields, accounts.FieldAccount)
	}
	if m.pwd != nil {
		fields = append(fields, accounts.FieldPwd)
	}
	if m.nickname != nil {
		fields = append(fields, accounts.FieldNickname)
	}
	if m.email != nil {
		fields = append(fields, accounts.FieldEmail)
	}
	if m.mobile != nil {
		fields = append(fields, accounts.FieldMobile)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case accounts.FieldAccount:
		return m.Account()
	case accounts.FieldPwd:
		return m.Pwd()
	case accounts.FieldNickname:
		return m.Nickname()
	case accounts.FieldEmail:
		return m.Email()
	case accounts.FieldMobile:
		return m.Mobile()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case accounts.FieldAccount:
		return m.OldAccount(ctx)
	case accounts.FieldPwd:
		return m.OldPwd(ctx)
	case accounts.FieldNickname:
		return m.OldNickname(ctx)
	case accounts.FieldEmail:
		return m.OldEmail(ctx)
	case accounts.FieldMobile:
		return m.OldMobile(ctx)
	}
	return nil, fmt.Errorf("unknown Accounts field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case accounts.FieldAccount:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccount(v)
		return nil
	case accounts.FieldPwd:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPwd(v)
		return nil
	case accounts.FieldNickname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNickname(v)
		return nil
	case accounts.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case accounts.FieldMobile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMobile(v)
		return nil
	}
	return fmt.Errorf("unknown Accounts field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Accounts numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Accounts nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountsMutation) ResetField(name string) error {
	switch name {
	case accounts.FieldAccount:
		m.ResetAccount()
		return nil
	case accounts.FieldPwd:
		m.ResetPwd()
		return nil
	case accounts.FieldNickname:
		m.ResetNickname()
		return nil
	case accounts.FieldEmail:
		m.ResetEmail()
		return nil
	case accounts.FieldMobile:
		m.ResetMobile()
		return nil
	}
	return fmt.Errorf("unknown Accounts field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountsMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Accounts unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountsMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Accounts edge %s", name)
}

// CWebsiteMutation represents an operation that mutates the CWebsite nodes in the graph.
type CWebsiteMutation struct {
	config
	op            Op
	typ           string
	id            *int64
	sort_id       *int32
	addsort_id    *int32
	category      *int32
	addcategory   *int32
	_type         *int32
	add_type      *int32
	website_name  *string
	website_icon  *string
	website_url   *string
	summary       *string
	description   *string
	create_id     *int64
	addcreate_id  *int64
	create_time   *time.Time
	modify_id     *int64
	addmodify_id  *int64
	modify_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*CWebsite, error)
	predicates    []predicate.CWebsite
}

var _ ent.Mutation = (*CWebsiteMutation)(nil)

// cwebsiteOption allows management of the mutation configuration using functional options.
type cwebsiteOption func(*CWebsiteMutation)

// newCWebsiteMutation creates new mutation for the CWebsite entity.
func newCWebsiteMutation(c config, op Op, opts ...cwebsiteOption) *CWebsiteMutation {
	m := &CWebsiteMutation{
		config:        c,
		op:            op,
		typ:           TypeCWebsite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCWebsiteID sets the ID field of the mutation.
func withCWebsiteID(id int64) cwebsiteOption {
	return func(m *CWebsiteMutation) {
		var (
			err   error
			once  sync.Once
			value *CWebsite
		)
		m.oldValue = func(ctx context.Context) (*CWebsite, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().CWebsite.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCWebsite sets the old CWebsite of the mutation.
func withCWebsite(node *CWebsite) cwebsiteOption {
	return func(m *CWebsiteMutation) {
		m.oldValue = func(context.Context) (*CWebsite, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CWebsiteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CWebsiteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of CWebsite entities.
func (m *CWebsiteMutation) SetID(id int64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CWebsiteMutation) ID() (id int64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CWebsiteMutation) IDs(ctx context.Context) ([]int64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().CWebsite.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSortID sets the "sort_id" field.
func (m *CWebsiteMutation) SetSortID(i int32) {
	m.sort_id = &i
	m.addsort_id = nil
}

// SortID returns the value of the "sort_id" field in the mutation.
func (m *CWebsiteMutation) SortID() (r int32, exists bool) {
	v := m.sort_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSortID returns the old "sort_id" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldSortID(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortID: %w", err)
	}
	return oldValue.SortID, nil
}

// AddSortID adds i to the "sort_id" field.
func (m *CWebsiteMutation) AddSortID(i int32) {
	if m.addsort_id != nil {
		*m.addsort_id += i
	} else {
		m.addsort_id = &i
	}
}

// AddedSortID returns the value that was added to the "sort_id" field in this mutation.
func (m *CWebsiteMutation) AddedSortID() (r int32, exists bool) {
	v := m.addsort_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearSortID clears the value of the "sort_id" field.
func (m *CWebsiteMutation) ClearSortID() {
	m.sort_id = nil
	m.addsort_id = nil
	m.clearedFields[cwebsite.FieldSortID] = struct{}{}
}

// SortIDCleared returns if the "sort_id" field was cleared in this mutation.
func (m *CWebsiteMutation) SortIDCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldSortID]
	return ok
}

// ResetSortID resets all changes to the "sort_id" field.
func (m *CWebsiteMutation) ResetSortID() {
	m.sort_id = nil
	m.addsort_id = nil
	delete(m.clearedFields, cwebsite.FieldSortID)
}

// SetCategory sets the "category" field.
func (m *CWebsiteMutation) SetCategory(i int32) {
	m.category = &i
	m.addcategory = nil
}

// Category returns the value of the "category" field in the mutation.
func (m *CWebsiteMutation) Category() (r int32, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldCategory(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// AddCategory adds i to the "category" field.
func (m *CWebsiteMutation) AddCategory(i int32) {
	if m.addcategory != nil {
		*m.addcategory += i
	} else {
		m.addcategory = &i
	}
}

// AddedCategory returns the value that was added to the "category" field in this mutation.
func (m *CWebsiteMutation) AddedCategory() (r int32, exists bool) {
	v := m.addcategory
	if v == nil {
		return
	}
	return *v, true
}

// ClearCategory clears the value of the "category" field.
func (m *CWebsiteMutation) ClearCategory() {
	m.category = nil
	m.addcategory = nil
	m.clearedFields[cwebsite.FieldCategory] = struct{}{}
}

// CategoryCleared returns if the "category" field was cleared in this mutation.
func (m *CWebsiteMutation) CategoryCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldCategory]
	return ok
}

// ResetCategory resets all changes to the "category" field.
func (m *CWebsiteMutation) ResetCategory() {
	m.category = nil
	m.addcategory = nil
	delete(m.clearedFields, cwebsite.FieldCategory)
}

// SetType sets the "type" field.
func (m *CWebsiteMutation) SetType(i int32) {
	m._type = &i
	m.add_type = nil
}

// GetType returns the value of the "type" field in the mutation.
func (m *CWebsiteMutation) GetType() (r int32, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldType(ctx context.Context) (v int32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// AddType adds i to the "type" field.
func (m *CWebsiteMutation) AddType(i int32) {
	if m.add_type != nil {
		*m.add_type += i
	} else {
		m.add_type = &i
	}
}

// AddedType returns the value that was added to the "type" field in this mutation.
func (m *CWebsiteMutation) AddedType() (r int32, exists bool) {
	v := m.add_type
	if v == nil {
		return
	}
	return *v, true
}

// ClearType clears the value of the "type" field.
func (m *CWebsiteMutation) ClearType() {
	m._type = nil
	m.add_type = nil
	m.clearedFields[cwebsite.FieldType] = struct{}{}
}

// TypeCleared returns if the "type" field was cleared in this mutation.
func (m *CWebsiteMutation) TypeCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldType]
	return ok
}

// ResetType resets all changes to the "type" field.
func (m *CWebsiteMutation) ResetType() {
	m._type = nil
	m.add_type = nil
	delete(m.clearedFields, cwebsite.FieldType)
}

// SetWebsiteName sets the "website_name" field.
func (m *CWebsiteMutation) SetWebsiteName(s string) {
	m.website_name = &s
}

// WebsiteName returns the value of the "website_name" field in the mutation.
func (m *CWebsiteMutation) WebsiteName() (r string, exists bool) {
	v := m.website_name
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteName returns the old "website_name" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldWebsiteName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteName: %w", err)
	}
	return oldValue.WebsiteName, nil
}

// ClearWebsiteName clears the value of the "website_name" field.
func (m *CWebsiteMutation) ClearWebsiteName() {
	m.website_name = nil
	m.clearedFields[cwebsite.FieldWebsiteName] = struct{}{}
}

// WebsiteNameCleared returns if the "website_name" field was cleared in this mutation.
func (m *CWebsiteMutation) WebsiteNameCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldWebsiteName]
	return ok
}

// ResetWebsiteName resets all changes to the "website_name" field.
func (m *CWebsiteMutation) ResetWebsiteName() {
	m.website_name = nil
	delete(m.clearedFields, cwebsite.FieldWebsiteName)
}

// SetWebsiteIcon sets the "website_icon" field.
func (m *CWebsiteMutation) SetWebsiteIcon(s string) {
	m.website_icon = &s
}

// WebsiteIcon returns the value of the "website_icon" field in the mutation.
func (m *CWebsiteMutation) WebsiteIcon() (r string, exists bool) {
	v := m.website_icon
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteIcon returns the old "website_icon" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldWebsiteIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteIcon: %w", err)
	}
	return oldValue.WebsiteIcon, nil
}

// ClearWebsiteIcon clears the value of the "website_icon" field.
func (m *CWebsiteMutation) ClearWebsiteIcon() {
	m.website_icon = nil
	m.clearedFields[cwebsite.FieldWebsiteIcon] = struct{}{}
}

// WebsiteIconCleared returns if the "website_icon" field was cleared in this mutation.
func (m *CWebsiteMutation) WebsiteIconCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldWebsiteIcon]
	return ok
}

// ResetWebsiteIcon resets all changes to the "website_icon" field.
func (m *CWebsiteMutation) ResetWebsiteIcon() {
	m.website_icon = nil
	delete(m.clearedFields, cwebsite.FieldWebsiteIcon)
}

// SetWebsiteURL sets the "website_url" field.
func (m *CWebsiteMutation) SetWebsiteURL(s string) {
	m.website_url = &s
}

// WebsiteURL returns the value of the "website_url" field in the mutation.
func (m *CWebsiteMutation) WebsiteURL() (r string, exists bool) {
	v := m.website_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteURL returns the old "website_url" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldWebsiteURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteURL: %w", err)
	}
	return oldValue.WebsiteURL, nil
}

// ClearWebsiteURL clears the value of the "website_url" field.
func (m *CWebsiteMutation) ClearWebsiteURL() {
	m.website_url = nil
	m.clearedFields[cwebsite.FieldWebsiteURL] = struct{}{}
}

// WebsiteURLCleared returns if the "website_url" field was cleared in this mutation.
func (m *CWebsiteMutation) WebsiteURLCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldWebsiteURL]
	return ok
}

// ResetWebsiteURL resets all changes to the "website_url" field.
func (m *CWebsiteMutation) ResetWebsiteURL() {
	m.website_url = nil
	delete(m.clearedFields, cwebsite.FieldWebsiteURL)
}

// SetSummary sets the "summary" field.
func (m *CWebsiteMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *CWebsiteMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ClearSummary clears the value of the "summary" field.
func (m *CWebsiteMutation) ClearSummary() {
	m.summary = nil
	m.clearedFields[cwebsite.FieldSummary] = struct{}{}
}

// SummaryCleared returns if the "summary" field was cleared in this mutation.
func (m *CWebsiteMutation) SummaryCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldSummary]
	return ok
}

// ResetSummary resets all changes to the "summary" field.
func (m *CWebsiteMutation) ResetSummary() {
	m.summary = nil
	delete(m.clearedFields, cwebsite.FieldSummary)
}

// SetDescription sets the "description" field.
func (m *CWebsiteMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *CWebsiteMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *CWebsiteMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[cwebsite.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *CWebsiteMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *CWebsiteMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, cwebsite.FieldDescription)
}

// SetCreateID sets the "create_id" field.
func (m *CWebsiteMutation) SetCreateID(i int64) {
	m.create_id = &i
	m.addcreate_id = nil
}

// CreateID returns the value of the "create_id" field in the mutation.
func (m *CWebsiteMutation) CreateID() (r int64, exists bool) {
	v := m.create_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateID returns the old "create_id" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldCreateID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateID: %w", err)
	}
	return oldValue.CreateID, nil
}

// AddCreateID adds i to the "create_id" field.
func (m *CWebsiteMutation) AddCreateID(i int64) {
	if m.addcreate_id != nil {
		*m.addcreate_id += i
	} else {
		m.addcreate_id = &i
	}
}

// AddedCreateID returns the value that was added to the "create_id" field in this mutation.
func (m *CWebsiteMutation) AddedCreateID() (r int64, exists bool) {
	v := m.addcreate_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateID clears the value of the "create_id" field.
func (m *CWebsiteMutation) ClearCreateID() {
	m.create_id = nil
	m.addcreate_id = nil
	m.clearedFields[cwebsite.FieldCreateID] = struct{}{}
}

// CreateIDCleared returns if the "create_id" field was cleared in this mutation.
func (m *CWebsiteMutation) CreateIDCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldCreateID]
	return ok
}

// ResetCreateID resets all changes to the "create_id" field.
func (m *CWebsiteMutation) ResetCreateID() {
	m.create_id = nil
	m.addcreate_id = nil
	delete(m.clearedFields, cwebsite.FieldCreateID)
}

// SetCreateTime sets the "create_time" field.
func (m *CWebsiteMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *CWebsiteMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "create_time" field.
func (m *CWebsiteMutation) ClearCreateTime() {
	m.create_time = nil
	m.clearedFields[cwebsite.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "create_time" field was cleared in this mutation.
func (m *CWebsiteMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *CWebsiteMutation) ResetCreateTime() {
	m.create_time = nil
	delete(m.clearedFields, cwebsite.FieldCreateTime)
}

// SetModifyID sets the "modify_id" field.
func (m *CWebsiteMutation) SetModifyID(i int64) {
	m.modify_id = &i
	m.addmodify_id = nil
}

// ModifyID returns the value of the "modify_id" field in the mutation.
func (m *CWebsiteMutation) ModifyID() (r int64, exists bool) {
	v := m.modify_id
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyID returns the old "modify_id" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldModifyID(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyID: %w", err)
	}
	return oldValue.ModifyID, nil
}

// AddModifyID adds i to the "modify_id" field.
func (m *CWebsiteMutation) AddModifyID(i int64) {
	if m.addmodify_id != nil {
		*m.addmodify_id += i
	} else {
		m.addmodify_id = &i
	}
}

// AddedModifyID returns the value that was added to the "modify_id" field in this mutation.
func (m *CWebsiteMutation) AddedModifyID() (r int64, exists bool) {
	v := m.addmodify_id
	if v == nil {
		return
	}
	return *v, true
}

// ClearModifyID clears the value of the "modify_id" field.
func (m *CWebsiteMutation) ClearModifyID() {
	m.modify_id = nil
	m.addmodify_id = nil
	m.clearedFields[cwebsite.FieldModifyID] = struct{}{}
}

// ModifyIDCleared returns if the "modify_id" field was cleared in this mutation.
func (m *CWebsiteMutation) ModifyIDCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldModifyID]
	return ok
}

// ResetModifyID resets all changes to the "modify_id" field.
func (m *CWebsiteMutation) ResetModifyID() {
	m.modify_id = nil
	m.addmodify_id = nil
	delete(m.clearedFields, cwebsite.FieldModifyID)
}

// SetModifyTime sets the "modify_time" field.
func (m *CWebsiteMutation) SetModifyTime(t time.Time) {
	m.modify_time = &t
}

// ModifyTime returns the value of the "modify_time" field in the mutation.
func (m *CWebsiteMutation) ModifyTime() (r time.Time, exists bool) {
	v := m.modify_time
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyTime returns the old "modify_time" field's value of the CWebsite entity.
// If the CWebsite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CWebsiteMutation) OldModifyTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyTime: %w", err)
	}
	return oldValue.ModifyTime, nil
}

// ClearModifyTime clears the value of the "modify_time" field.
func (m *CWebsiteMutation) ClearModifyTime() {
	m.modify_time = nil
	m.clearedFields[cwebsite.FieldModifyTime] = struct{}{}
}

// ModifyTimeCleared returns if the "modify_time" field was cleared in this mutation.
func (m *CWebsiteMutation) ModifyTimeCleared() bool {
	_, ok := m.clearedFields[cwebsite.FieldModifyTime]
	return ok
}

// ResetModifyTime resets all changes to the "modify_time" field.
func (m *CWebsiteMutation) ResetModifyTime() {
	m.modify_time = nil
	delete(m.clearedFields, cwebsite.FieldModifyTime)
}

// Where appends a list predicates to the CWebsiteMutation builder.
func (m *CWebsiteMutation) Where(ps ...predicate.CWebsite) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CWebsiteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CWebsiteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.CWebsite, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CWebsiteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CWebsiteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (CWebsite).
func (m *CWebsiteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CWebsiteMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.sort_id != nil {
		fields = append(fields, cwebsite.FieldSortID)
	}
	if m.category != nil {
		fields = append(fields, cwebsite.FieldCategory)
	}
	if m._type != nil {
		fields = append(fields, cwebsite.FieldType)
	}
	if m.website_name != nil {
		fields = append(fields, cwebsite.FieldWebsiteName)
	}
	if m.website_icon != nil {
		fields = append(fields, cwebsite.FieldWebsiteIcon)
	}
	if m.website_url != nil {
		fields = append(fields, cwebsite.FieldWebsiteURL)
	}
	if m.summary != nil {
		fields = append(fields, cwebsite.FieldSummary)
	}
	if m.description != nil {
		fields = append(fields, cwebsite.FieldDescription)
	}
	if m.create_id != nil {
		fields = append(fields, cwebsite.FieldCreateID)
	}
	if m.create_time != nil {
		fields = append(fields, cwebsite.FieldCreateTime)
	}
	if m.modify_id != nil {
		fields = append(fields, cwebsite.FieldModifyID)
	}
	if m.modify_time != nil {
		fields = append(fields, cwebsite.FieldModifyTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CWebsiteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case cwebsite.FieldSortID:
		return m.SortID()
	case cwebsite.FieldCategory:
		return m.Category()
	case cwebsite.FieldType:
		return m.GetType()
	case cwebsite.FieldWebsiteName:
		return m.WebsiteName()
	case cwebsite.FieldWebsiteIcon:
		return m.WebsiteIcon()
	case cwebsite.FieldWebsiteURL:
		return m.WebsiteURL()
	case cwebsite.FieldSummary:
		return m.Summary()
	case cwebsite.FieldDescription:
		return m.Description()
	case cwebsite.FieldCreateID:
		return m.CreateID()
	case cwebsite.FieldCreateTime:
		return m.CreateTime()
	case cwebsite.FieldModifyID:
		return m.ModifyID()
	case cwebsite.FieldModifyTime:
		return m.ModifyTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CWebsiteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case cwebsite.FieldSortID:
		return m.OldSortID(ctx)
	case cwebsite.FieldCategory:
		return m.OldCategory(ctx)
	case cwebsite.FieldType:
		return m.OldType(ctx)
	case cwebsite.FieldWebsiteName:
		return m.OldWebsiteName(ctx)
	case cwebsite.FieldWebsiteIcon:
		return m.OldWebsiteIcon(ctx)
	case cwebsite.FieldWebsiteURL:
		return m.OldWebsiteURL(ctx)
	case cwebsite.FieldSummary:
		return m.OldSummary(ctx)
	case cwebsite.FieldDescription:
		return m.OldDescription(ctx)
	case cwebsite.FieldCreateID:
		return m.OldCreateID(ctx)
	case cwebsite.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case cwebsite.FieldModifyID:
		return m.OldModifyID(ctx)
	case cwebsite.FieldModifyTime:
		return m.OldModifyTime(ctx)
	}
	return nil, fmt.Errorf("unknown CWebsite field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CWebsiteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case cwebsite.FieldSortID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortID(v)
		return nil
	case cwebsite.FieldCategory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case cwebsite.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case cwebsite.FieldWebsiteName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteName(v)
		return nil
	case cwebsite.FieldWebsiteIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteIcon(v)
		return nil
	case cwebsite.FieldWebsiteURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteURL(v)
		return nil
	case cwebsite.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case cwebsite.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case cwebsite.FieldCreateID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateID(v)
		return nil
	case cwebsite.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case cwebsite.FieldModifyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyID(v)
		return nil
	case cwebsite.FieldModifyTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyTime(v)
		return nil
	}
	return fmt.Errorf("unknown CWebsite field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CWebsiteMutation) AddedFields() []string {
	var fields []string
	if m.addsort_id != nil {
		fields = append(fields, cwebsite.FieldSortID)
	}
	if m.addcategory != nil {
		fields = append(fields, cwebsite.FieldCategory)
	}
	if m.add_type != nil {
		fields = append(fields, cwebsite.FieldType)
	}
	if m.addcreate_id != nil {
		fields = append(fields, cwebsite.FieldCreateID)
	}
	if m.addmodify_id != nil {
		fields = append(fields, cwebsite.FieldModifyID)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CWebsiteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case cwebsite.FieldSortID:
		return m.AddedSortID()
	case cwebsite.FieldCategory:
		return m.AddedCategory()
	case cwebsite.FieldType:
		return m.AddedType()
	case cwebsite.FieldCreateID:
		return m.AddedCreateID()
	case cwebsite.FieldModifyID:
		return m.AddedModifyID()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CWebsiteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case cwebsite.FieldSortID:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortID(v)
		return nil
	case cwebsite.FieldCategory:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategory(v)
		return nil
	case cwebsite.FieldType:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddType(v)
		return nil
	case cwebsite.FieldCreateID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCreateID(v)
		return nil
	case cwebsite.FieldModifyID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddModifyID(v)
		return nil
	}
	return fmt.Errorf("unknown CWebsite numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CWebsiteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(cwebsite.FieldSortID) {
		fields = append(fields, cwebsite.FieldSortID)
	}
	if m.FieldCleared(cwebsite.FieldCategory) {
		fields = append(fields, cwebsite.FieldCategory)
	}
	if m.FieldCleared(cwebsite.FieldType) {
		fields = append(fields, cwebsite.FieldType)
	}
	if m.FieldCleared(cwebsite.FieldWebsiteName) {
		fields = append(fields, cwebsite.FieldWebsiteName)
	}
	if m.FieldCleared(cwebsite.FieldWebsiteIcon) {
		fields = append(fields, cwebsite.FieldWebsiteIcon)
	}
	if m.FieldCleared(cwebsite.FieldWebsiteURL) {
		fields = append(fields, cwebsite.FieldWebsiteURL)
	}
	if m.FieldCleared(cwebsite.FieldSummary) {
		fields = append(fields, cwebsite.FieldSummary)
	}
	if m.FieldCleared(cwebsite.FieldDescription) {
		fields = append(fields, cwebsite.FieldDescription)
	}
	if m.FieldCleared(cwebsite.FieldCreateID) {
		fields = append(fields, cwebsite.FieldCreateID)
	}
	if m.FieldCleared(cwebsite.FieldCreateTime) {
		fields = append(fields, cwebsite.FieldCreateTime)
	}
	if m.FieldCleared(cwebsite.FieldModifyID) {
		fields = append(fields, cwebsite.FieldModifyID)
	}
	if m.FieldCleared(cwebsite.FieldModifyTime) {
		fields = append(fields, cwebsite.FieldModifyTime)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CWebsiteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CWebsiteMutation) ClearField(name string) error {
	switch name {
	case cwebsite.FieldSortID:
		m.ClearSortID()
		return nil
	case cwebsite.FieldCategory:
		m.ClearCategory()
		return nil
	case cwebsite.FieldType:
		m.ClearType()
		return nil
	case cwebsite.FieldWebsiteName:
		m.ClearWebsiteName()
		return nil
	case cwebsite.FieldWebsiteIcon:
		m.ClearWebsiteIcon()
		return nil
	case cwebsite.FieldWebsiteURL:
		m.ClearWebsiteURL()
		return nil
	case cwebsite.FieldSummary:
		m.ClearSummary()
		return nil
	case cwebsite.FieldDescription:
		m.ClearDescription()
		return nil
	case cwebsite.FieldCreateID:
		m.ClearCreateID()
		return nil
	case cwebsite.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case cwebsite.FieldModifyID:
		m.ClearModifyID()
		return nil
	case cwebsite.FieldModifyTime:
		m.ClearModifyTime()
		return nil
	}
	return fmt.Errorf("unknown CWebsite nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CWebsiteMutation) ResetField(name string) error {
	switch name {
	case cwebsite.FieldSortID:
		m.ResetSortID()
		return nil
	case cwebsite.FieldCategory:
		m.ResetCategory()
		return nil
	case cwebsite.FieldType:
		m.ResetType()
		return nil
	case cwebsite.FieldWebsiteName:
		m.ResetWebsiteName()
		return nil
	case cwebsite.FieldWebsiteIcon:
		m.ResetWebsiteIcon()
		return nil
	case cwebsite.FieldWebsiteURL:
		m.ResetWebsiteURL()
		return nil
	case cwebsite.FieldSummary:
		m.ResetSummary()
		return nil
	case cwebsite.FieldDescription:
		m.ResetDescription()
		return nil
	case cwebsite.FieldCreateID:
		m.ResetCreateID()
		return nil
	case cwebsite.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case cwebsite.FieldModifyID:
		m.ResetModifyID()
		return nil
	case cwebsite.FieldModifyTime:
		m.ResetModifyTime()
		return nil
	}
	return fmt.Errorf("unknown CWebsite field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CWebsiteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CWebsiteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CWebsiteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CWebsiteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CWebsiteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CWebsiteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CWebsiteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown CWebsite unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CWebsiteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown CWebsite edge %s", name)
}

// WebsiteMutation represents an operation that mutates the Website nodes in the graph.
type WebsiteMutation struct {
	config
	op            Op
	typ           string
	id            *int32
	sort_id       *int8
	addsort_id    *int8
	category      *int8
	addcategory   *int8
	website_name  *string
	website_icon  *string
	website_url   *string
	summary       *string
	description   *string
	create_id     *string
	create_time   *time.Time
	modify_id     *string
	modify_time   *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Website, error)
	predicates    []predicate.Website
}

var _ ent.Mutation = (*WebsiteMutation)(nil)

// websiteOption allows management of the mutation configuration using functional options.
type websiteOption func(*WebsiteMutation)

// newWebsiteMutation creates new mutation for the Website entity.
func newWebsiteMutation(c config, op Op, opts ...websiteOption) *WebsiteMutation {
	m := &WebsiteMutation{
		config:        c,
		op:            op,
		typ:           TypeWebsite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebsiteID sets the ID field of the mutation.
func withWebsiteID(id int32) websiteOption {
	return func(m *WebsiteMutation) {
		var (
			err   error
			once  sync.Once
			value *Website
		)
		m.oldValue = func(ctx context.Context) (*Website, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Website.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebsite sets the old Website of the mutation.
func withWebsite(node *Website) websiteOption {
	return func(m *WebsiteMutation) {
		m.oldValue = func(context.Context) (*Website, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebsiteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebsiteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Website entities.
func (m *WebsiteMutation) SetID(id int32) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebsiteMutation) ID() (id int32, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebsiteMutation) IDs(ctx context.Context) ([]int32, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int32{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Website.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetSortID sets the "sort_id" field.
func (m *WebsiteMutation) SetSortID(i int8) {
	m.sort_id = &i
	m.addsort_id = nil
}

// SortID returns the value of the "sort_id" field in the mutation.
func (m *WebsiteMutation) SortID() (r int8, exists bool) {
	v := m.sort_id
	if v == nil {
		return
	}
	return *v, true
}

// OldSortID returns the old "sort_id" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldSortID(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSortID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSortID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSortID: %w", err)
	}
	return oldValue.SortID, nil
}

// AddSortID adds i to the "sort_id" field.
func (m *WebsiteMutation) AddSortID(i int8) {
	if m.addsort_id != nil {
		*m.addsort_id += i
	} else {
		m.addsort_id = &i
	}
}

// AddedSortID returns the value that was added to the "sort_id" field in this mutation.
func (m *WebsiteMutation) AddedSortID() (r int8, exists bool) {
	v := m.addsort_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetSortID resets all changes to the "sort_id" field.
func (m *WebsiteMutation) ResetSortID() {
	m.sort_id = nil
	m.addsort_id = nil
}

// SetCategory sets the "category" field.
func (m *WebsiteMutation) SetCategory(i int8) {
	m.category = &i
	m.addcategory = nil
}

// Category returns the value of the "category" field in the mutation.
func (m *WebsiteMutation) Category() (r int8, exists bool) {
	v := m.category
	if v == nil {
		return
	}
	return *v, true
}

// OldCategory returns the old "category" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldCategory(ctx context.Context) (v int8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCategory is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCategory requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCategory: %w", err)
	}
	return oldValue.Category, nil
}

// AddCategory adds i to the "category" field.
func (m *WebsiteMutation) AddCategory(i int8) {
	if m.addcategory != nil {
		*m.addcategory += i
	} else {
		m.addcategory = &i
	}
}

// AddedCategory returns the value that was added to the "category" field in this mutation.
func (m *WebsiteMutation) AddedCategory() (r int8, exists bool) {
	v := m.addcategory
	if v == nil {
		return
	}
	return *v, true
}

// ResetCategory resets all changes to the "category" field.
func (m *WebsiteMutation) ResetCategory() {
	m.category = nil
	m.addcategory = nil
}

// SetWebsiteName sets the "website_name" field.
func (m *WebsiteMutation) SetWebsiteName(s string) {
	m.website_name = &s
}

// WebsiteName returns the value of the "website_name" field in the mutation.
func (m *WebsiteMutation) WebsiteName() (r string, exists bool) {
	v := m.website_name
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteName returns the old "website_name" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldWebsiteName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteName: %w", err)
	}
	return oldValue.WebsiteName, nil
}

// ResetWebsiteName resets all changes to the "website_name" field.
func (m *WebsiteMutation) ResetWebsiteName() {
	m.website_name = nil
}

// SetWebsiteIcon sets the "website_icon" field.
func (m *WebsiteMutation) SetWebsiteIcon(s string) {
	m.website_icon = &s
}

// WebsiteIcon returns the value of the "website_icon" field in the mutation.
func (m *WebsiteMutation) WebsiteIcon() (r string, exists bool) {
	v := m.website_icon
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteIcon returns the old "website_icon" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldWebsiteIcon(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteIcon is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteIcon requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteIcon: %w", err)
	}
	return oldValue.WebsiteIcon, nil
}

// ResetWebsiteIcon resets all changes to the "website_icon" field.
func (m *WebsiteMutation) ResetWebsiteIcon() {
	m.website_icon = nil
}

// SetWebsiteURL sets the "website_url" field.
func (m *WebsiteMutation) SetWebsiteURL(s string) {
	m.website_url = &s
}

// WebsiteURL returns the value of the "website_url" field in the mutation.
func (m *WebsiteMutation) WebsiteURL() (r string, exists bool) {
	v := m.website_url
	if v == nil {
		return
	}
	return *v, true
}

// OldWebsiteURL returns the old "website_url" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldWebsiteURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebsiteURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebsiteURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebsiteURL: %w", err)
	}
	return oldValue.WebsiteURL, nil
}

// ResetWebsiteURL resets all changes to the "website_url" field.
func (m *WebsiteMutation) ResetWebsiteURL() {
	m.website_url = nil
}

// SetSummary sets the "summary" field.
func (m *WebsiteMutation) SetSummary(s string) {
	m.summary = &s
}

// Summary returns the value of the "summary" field in the mutation.
func (m *WebsiteMutation) Summary() (r string, exists bool) {
	v := m.summary
	if v == nil {
		return
	}
	return *v, true
}

// OldSummary returns the old "summary" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldSummary(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSummary is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSummary requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSummary: %w", err)
	}
	return oldValue.Summary, nil
}

// ResetSummary resets all changes to the "summary" field.
func (m *WebsiteMutation) ResetSummary() {
	m.summary = nil
}

// SetDescription sets the "description" field.
func (m *WebsiteMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *WebsiteMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *WebsiteMutation) ResetDescription() {
	m.description = nil
}

// SetCreateID sets the "create_id" field.
func (m *WebsiteMutation) SetCreateID(s string) {
	m.create_id = &s
}

// CreateID returns the value of the "create_id" field in the mutation.
func (m *WebsiteMutation) CreateID() (r string, exists bool) {
	v := m.create_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateID returns the old "create_id" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldCreateID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateID: %w", err)
	}
	return oldValue.CreateID, nil
}

// ResetCreateID resets all changes to the "create_id" field.
func (m *WebsiteMutation) ResetCreateID() {
	m.create_id = nil
}

// SetCreateTime sets the "create_time" field.
func (m *WebsiteMutation) SetCreateTime(t time.Time) {
	m.create_time = &t
}

// CreateTime returns the value of the "create_time" field in the mutation.
func (m *WebsiteMutation) CreateTime() (r time.Time, exists bool) {
	v := m.create_time
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "create_time" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreateTime: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ResetCreateTime resets all changes to the "create_time" field.
func (m *WebsiteMutation) ResetCreateTime() {
	m.create_time = nil
}

// SetModifyID sets the "modify_id" field.
func (m *WebsiteMutation) SetModifyID(s string) {
	m.modify_id = &s
}

// ModifyID returns the value of the "modify_id" field in the mutation.
func (m *WebsiteMutation) ModifyID() (r string, exists bool) {
	v := m.modify_id
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyID returns the old "modify_id" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldModifyID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyID: %w", err)
	}
	return oldValue.ModifyID, nil
}

// ResetModifyID resets all changes to the "modify_id" field.
func (m *WebsiteMutation) ResetModifyID() {
	m.modify_id = nil
}

// SetModifyTime sets the "modify_time" field.
func (m *WebsiteMutation) SetModifyTime(t time.Time) {
	m.modify_time = &t
}

// ModifyTime returns the value of the "modify_time" field in the mutation.
func (m *WebsiteMutation) ModifyTime() (r time.Time, exists bool) {
	v := m.modify_time
	if v == nil {
		return
	}
	return *v, true
}

// OldModifyTime returns the old "modify_time" field's value of the Website entity.
// If the Website object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebsiteMutation) OldModifyTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifyTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifyTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifyTime: %w", err)
	}
	return oldValue.ModifyTime, nil
}

// ResetModifyTime resets all changes to the "modify_time" field.
func (m *WebsiteMutation) ResetModifyTime() {
	m.modify_time = nil
}

// Where appends a list predicates to the WebsiteMutation builder.
func (m *WebsiteMutation) Where(ps ...predicate.Website) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebsiteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebsiteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Website, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebsiteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebsiteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Website).
func (m *WebsiteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebsiteMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.sort_id != nil {
		fields = append(fields, website.FieldSortID)
	}
	if m.category != nil {
		fields = append(fields, website.FieldCategory)
	}
	if m.website_name != nil {
		fields = append(fields, website.FieldWebsiteName)
	}
	if m.website_icon != nil {
		fields = append(fields, website.FieldWebsiteIcon)
	}
	if m.website_url != nil {
		fields = append(fields, website.FieldWebsiteURL)
	}
	if m.summary != nil {
		fields = append(fields, website.FieldSummary)
	}
	if m.description != nil {
		fields = append(fields, website.FieldDescription)
	}
	if m.create_id != nil {
		fields = append(fields, website.FieldCreateID)
	}
	if m.create_time != nil {
		fields = append(fields, website.FieldCreateTime)
	}
	if m.modify_id != nil {
		fields = append(fields, website.FieldModifyID)
	}
	if m.modify_time != nil {
		fields = append(fields, website.FieldModifyTime)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebsiteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case website.FieldSortID:
		return m.SortID()
	case website.FieldCategory:
		return m.Category()
	case website.FieldWebsiteName:
		return m.WebsiteName()
	case website.FieldWebsiteIcon:
		return m.WebsiteIcon()
	case website.FieldWebsiteURL:
		return m.WebsiteURL()
	case website.FieldSummary:
		return m.Summary()
	case website.FieldDescription:
		return m.Description()
	case website.FieldCreateID:
		return m.CreateID()
	case website.FieldCreateTime:
		return m.CreateTime()
	case website.FieldModifyID:
		return m.ModifyID()
	case website.FieldModifyTime:
		return m.ModifyTime()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebsiteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case website.FieldSortID:
		return m.OldSortID(ctx)
	case website.FieldCategory:
		return m.OldCategory(ctx)
	case website.FieldWebsiteName:
		return m.OldWebsiteName(ctx)
	case website.FieldWebsiteIcon:
		return m.OldWebsiteIcon(ctx)
	case website.FieldWebsiteURL:
		return m.OldWebsiteURL(ctx)
	case website.FieldSummary:
		return m.OldSummary(ctx)
	case website.FieldDescription:
		return m.OldDescription(ctx)
	case website.FieldCreateID:
		return m.OldCreateID(ctx)
	case website.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case website.FieldModifyID:
		return m.OldModifyID(ctx)
	case website.FieldModifyTime:
		return m.OldModifyTime(ctx)
	}
	return nil, fmt.Errorf("unknown Website field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case website.FieldSortID:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSortID(v)
		return nil
	case website.FieldCategory:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCategory(v)
		return nil
	case website.FieldWebsiteName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteName(v)
		return nil
	case website.FieldWebsiteIcon:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteIcon(v)
		return nil
	case website.FieldWebsiteURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebsiteURL(v)
		return nil
	case website.FieldSummary:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSummary(v)
		return nil
	case website.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case website.FieldCreateID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateID(v)
		return nil
	case website.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case website.FieldModifyID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyID(v)
		return nil
	case website.FieldModifyTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifyTime(v)
		return nil
	}
	return fmt.Errorf("unknown Website field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebsiteMutation) AddedFields() []string {
	var fields []string
	if m.addsort_id != nil {
		fields = append(fields, website.FieldSortID)
	}
	if m.addcategory != nil {
		fields = append(fields, website.FieldCategory)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebsiteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case website.FieldSortID:
		return m.AddedSortID()
	case website.FieldCategory:
		return m.AddedCategory()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebsiteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case website.FieldSortID:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSortID(v)
		return nil
	case website.FieldCategory:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddCategory(v)
		return nil
	}
	return fmt.Errorf("unknown Website numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebsiteMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebsiteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebsiteMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Website nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebsiteMutation) ResetField(name string) error {
	switch name {
	case website.FieldSortID:
		m.ResetSortID()
		return nil
	case website.FieldCategory:
		m.ResetCategory()
		return nil
	case website.FieldWebsiteName:
		m.ResetWebsiteName()
		return nil
	case website.FieldWebsiteIcon:
		m.ResetWebsiteIcon()
		return nil
	case website.FieldWebsiteURL:
		m.ResetWebsiteURL()
		return nil
	case website.FieldSummary:
		m.ResetSummary()
		return nil
	case website.FieldDescription:
		m.ResetDescription()
		return nil
	case website.FieldCreateID:
		m.ResetCreateID()
		return nil
	case website.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case website.FieldModifyID:
		m.ResetModifyID()
		return nil
	case website.FieldModifyTime:
		m.ResetModifyTime()
		return nil
	}
	return fmt.Errorf("unknown Website field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebsiteMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebsiteMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebsiteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebsiteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebsiteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebsiteMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebsiteMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Website unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebsiteMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Website edge %s", name)
}
