// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"golangStudy/2.web/8.ent/ent/migrate"

	"golangStudy/2.web/8.ent/ent/accounts"
	"golangStudy/2.web/8.ent/ent/cwebsite"
	"golangStudy/2.web/8.ent/ent/website"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Accounts is the client for interacting with the Accounts builders.
	Accounts *AccountsClient
	// CWebsite is the client for interacting with the CWebsite builders.
	CWebsite *CWebsiteClient
	// Website is the client for interacting with the Website builders.
	Website *WebsiteClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Accounts = NewAccountsClient(c.config)
	c.CWebsite = NewCWebsiteClient(c.config)
	c.Website = NewWebsiteClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Accounts: NewAccountsClient(cfg),
		CWebsite: NewCWebsiteClient(cfg),
		Website:  NewWebsiteClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:      ctx,
		config:   cfg,
		Accounts: NewAccountsClient(cfg),
		CWebsite: NewCWebsiteClient(cfg),
		Website:  NewWebsiteClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Accounts.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Accounts.Use(hooks...)
	c.CWebsite.Use(hooks...)
	c.Website.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Accounts.Intercept(interceptors...)
	c.CWebsite.Intercept(interceptors...)
	c.Website.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AccountsMutation:
		return c.Accounts.mutate(ctx, m)
	case *CWebsiteMutation:
		return c.CWebsite.mutate(ctx, m)
	case *WebsiteMutation:
		return c.Website.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AccountsClient is a client for the Accounts schema.
type AccountsClient struct {
	config
}

// NewAccountsClient returns a client for the Accounts from the given config.
func NewAccountsClient(c config) *AccountsClient {
	return &AccountsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `accounts.Hooks(f(g(h())))`.
func (c *AccountsClient) Use(hooks ...Hook) {
	c.hooks.Accounts = append(c.hooks.Accounts, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `accounts.Intercept(f(g(h())))`.
func (c *AccountsClient) Intercept(interceptors ...Interceptor) {
	c.inters.Accounts = append(c.inters.Accounts, interceptors...)
}

// Create returns a builder for creating a Accounts entity.
func (c *AccountsClient) Create() *AccountsCreate {
	mutation := newAccountsMutation(c.config, OpCreate)
	return &AccountsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Accounts entities.
func (c *AccountsClient) CreateBulk(builders ...*AccountsCreate) *AccountsCreateBulk {
	return &AccountsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Accounts.
func (c *AccountsClient) Update() *AccountsUpdate {
	mutation := newAccountsMutation(c.config, OpUpdate)
	return &AccountsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AccountsClient) UpdateOne(a *Accounts) *AccountsUpdateOne {
	mutation := newAccountsMutation(c.config, OpUpdateOne, withAccounts(a))
	return &AccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AccountsClient) UpdateOneID(id int32) *AccountsUpdateOne {
	mutation := newAccountsMutation(c.config, OpUpdateOne, withAccountsID(id))
	return &AccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Accounts.
func (c *AccountsClient) Delete() *AccountsDelete {
	mutation := newAccountsMutation(c.config, OpDelete)
	return &AccountsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AccountsClient) DeleteOne(a *Accounts) *AccountsDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AccountsClient) DeleteOneID(id int32) *AccountsDeleteOne {
	builder := c.Delete().Where(accounts.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AccountsDeleteOne{builder}
}

// Query returns a query builder for Accounts.
func (c *AccountsClient) Query() *AccountsQuery {
	return &AccountsQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAccounts},
		inters: c.Interceptors(),
	}
}

// Get returns a Accounts entity by its id.
func (c *AccountsClient) Get(ctx context.Context, id int32) (*Accounts, error) {
	return c.Query().Where(accounts.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AccountsClient) GetX(ctx context.Context, id int32) *Accounts {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AccountsClient) Hooks() []Hook {
	return c.hooks.Accounts
}

// Interceptors returns the client interceptors.
func (c *AccountsClient) Interceptors() []Interceptor {
	return c.inters.Accounts
}

func (c *AccountsClient) mutate(ctx context.Context, m *AccountsMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AccountsCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AccountsUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AccountsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AccountsDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Accounts mutation op: %q", m.Op())
	}
}

// CWebsiteClient is a client for the CWebsite schema.
type CWebsiteClient struct {
	config
}

// NewCWebsiteClient returns a client for the CWebsite from the given config.
func NewCWebsiteClient(c config) *CWebsiteClient {
	return &CWebsiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `cwebsite.Hooks(f(g(h())))`.
func (c *CWebsiteClient) Use(hooks ...Hook) {
	c.hooks.CWebsite = append(c.hooks.CWebsite, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `cwebsite.Intercept(f(g(h())))`.
func (c *CWebsiteClient) Intercept(interceptors ...Interceptor) {
	c.inters.CWebsite = append(c.inters.CWebsite, interceptors...)
}

// Create returns a builder for creating a CWebsite entity.
func (c *CWebsiteClient) Create() *CWebsiteCreate {
	mutation := newCWebsiteMutation(c.config, OpCreate)
	return &CWebsiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CWebsite entities.
func (c *CWebsiteClient) CreateBulk(builders ...*CWebsiteCreate) *CWebsiteCreateBulk {
	return &CWebsiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CWebsite.
func (c *CWebsiteClient) Update() *CWebsiteUpdate {
	mutation := newCWebsiteMutation(c.config, OpUpdate)
	return &CWebsiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CWebsiteClient) UpdateOne(cw *CWebsite) *CWebsiteUpdateOne {
	mutation := newCWebsiteMutation(c.config, OpUpdateOne, withCWebsite(cw))
	return &CWebsiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CWebsiteClient) UpdateOneID(id int64) *CWebsiteUpdateOne {
	mutation := newCWebsiteMutation(c.config, OpUpdateOne, withCWebsiteID(id))
	return &CWebsiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CWebsite.
func (c *CWebsiteClient) Delete() *CWebsiteDelete {
	mutation := newCWebsiteMutation(c.config, OpDelete)
	return &CWebsiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *CWebsiteClient) DeleteOne(cw *CWebsite) *CWebsiteDeleteOne {
	return c.DeleteOneID(cw.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *CWebsiteClient) DeleteOneID(id int64) *CWebsiteDeleteOne {
	builder := c.Delete().Where(cwebsite.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CWebsiteDeleteOne{builder}
}

// Query returns a query builder for CWebsite.
func (c *CWebsiteClient) Query() *CWebsiteQuery {
	return &CWebsiteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeCWebsite},
		inters: c.Interceptors(),
	}
}

// Get returns a CWebsite entity by its id.
func (c *CWebsiteClient) Get(ctx context.Context, id int64) (*CWebsite, error) {
	return c.Query().Where(cwebsite.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CWebsiteClient) GetX(ctx context.Context, id int64) *CWebsite {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CWebsiteClient) Hooks() []Hook {
	return c.hooks.CWebsite
}

// Interceptors returns the client interceptors.
func (c *CWebsiteClient) Interceptors() []Interceptor {
	return c.inters.CWebsite
}

func (c *CWebsiteClient) mutate(ctx context.Context, m *CWebsiteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&CWebsiteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&CWebsiteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&CWebsiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&CWebsiteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown CWebsite mutation op: %q", m.Op())
	}
}

// WebsiteClient is a client for the Website schema.
type WebsiteClient struct {
	config
}

// NewWebsiteClient returns a client for the Website from the given config.
func NewWebsiteClient(c config) *WebsiteClient {
	return &WebsiteClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `website.Hooks(f(g(h())))`.
func (c *WebsiteClient) Use(hooks ...Hook) {
	c.hooks.Website = append(c.hooks.Website, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `website.Intercept(f(g(h())))`.
func (c *WebsiteClient) Intercept(interceptors ...Interceptor) {
	c.inters.Website = append(c.inters.Website, interceptors...)
}

// Create returns a builder for creating a Website entity.
func (c *WebsiteClient) Create() *WebsiteCreate {
	mutation := newWebsiteMutation(c.config, OpCreate)
	return &WebsiteCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Website entities.
func (c *WebsiteClient) CreateBulk(builders ...*WebsiteCreate) *WebsiteCreateBulk {
	return &WebsiteCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Website.
func (c *WebsiteClient) Update() *WebsiteUpdate {
	mutation := newWebsiteMutation(c.config, OpUpdate)
	return &WebsiteUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebsiteClient) UpdateOne(w *Website) *WebsiteUpdateOne {
	mutation := newWebsiteMutation(c.config, OpUpdateOne, withWebsite(w))
	return &WebsiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebsiteClient) UpdateOneID(id int32) *WebsiteUpdateOne {
	mutation := newWebsiteMutation(c.config, OpUpdateOne, withWebsiteID(id))
	return &WebsiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Website.
func (c *WebsiteClient) Delete() *WebsiteDelete {
	mutation := newWebsiteMutation(c.config, OpDelete)
	return &WebsiteDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebsiteClient) DeleteOne(w *Website) *WebsiteDeleteOne {
	return c.DeleteOneID(w.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebsiteClient) DeleteOneID(id int32) *WebsiteDeleteOne {
	builder := c.Delete().Where(website.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebsiteDeleteOne{builder}
}

// Query returns a query builder for Website.
func (c *WebsiteClient) Query() *WebsiteQuery {
	return &WebsiteQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebsite},
		inters: c.Interceptors(),
	}
}

// Get returns a Website entity by its id.
func (c *WebsiteClient) Get(ctx context.Context, id int32) (*Website, error) {
	return c.Query().Where(website.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebsiteClient) GetX(ctx context.Context, id int32) *Website {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *WebsiteClient) Hooks() []Hook {
	return c.hooks.Website
}

// Interceptors returns the client interceptors.
func (c *WebsiteClient) Interceptors() []Interceptor {
	return c.inters.Website
}

func (c *WebsiteClient) mutate(ctx context.Context, m *WebsiteMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebsiteCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebsiteUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebsiteUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebsiteDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Website mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Accounts, CWebsite, Website []ent.Hook
	}
	inters struct {
		Accounts, CWebsite, Website []ent.Interceptor
	}
)
