// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"golangStudy/2.web/8.ent/ent/predicate"
	"golangStudy/2.web/8.ent/ent/website"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// WebsiteUpdate is the builder for updating Website entities.
type WebsiteUpdate struct {
	config
	hooks    []Hook
	mutation *WebsiteMutation
}

// Where appends a list predicates to the WebsiteUpdate builder.
func (wu *WebsiteUpdate) Where(ps ...predicate.Website) *WebsiteUpdate {
	wu.mutation.Where(ps...)
	return wu
}

// SetSortID sets the "sort_id" field.
func (wu *WebsiteUpdate) SetSortID(i int8) *WebsiteUpdate {
	wu.mutation.ResetSortID()
	wu.mutation.SetSortID(i)
	return wu
}

// AddSortID adds i to the "sort_id" field.
func (wu *WebsiteUpdate) AddSortID(i int8) *WebsiteUpdate {
	wu.mutation.AddSortID(i)
	return wu
}

// SetCategory sets the "category" field.
func (wu *WebsiteUpdate) SetCategory(i int8) *WebsiteUpdate {
	wu.mutation.ResetCategory()
	wu.mutation.SetCategory(i)
	return wu
}

// AddCategory adds i to the "category" field.
func (wu *WebsiteUpdate) AddCategory(i int8) *WebsiteUpdate {
	wu.mutation.AddCategory(i)
	return wu
}

// SetWebsiteName sets the "website_name" field.
func (wu *WebsiteUpdate) SetWebsiteName(s string) *WebsiteUpdate {
	wu.mutation.SetWebsiteName(s)
	return wu
}

// SetWebsiteIcon sets the "website_icon" field.
func (wu *WebsiteUpdate) SetWebsiteIcon(s string) *WebsiteUpdate {
	wu.mutation.SetWebsiteIcon(s)
	return wu
}

// SetWebsiteURL sets the "website_url" field.
func (wu *WebsiteUpdate) SetWebsiteURL(s string) *WebsiteUpdate {
	wu.mutation.SetWebsiteURL(s)
	return wu
}

// SetSummary sets the "summary" field.
func (wu *WebsiteUpdate) SetSummary(s string) *WebsiteUpdate {
	wu.mutation.SetSummary(s)
	return wu
}

// SetDescription sets the "description" field.
func (wu *WebsiteUpdate) SetDescription(s string) *WebsiteUpdate {
	wu.mutation.SetDescription(s)
	return wu
}

// SetCreateID sets the "create_id" field.
func (wu *WebsiteUpdate) SetCreateID(s string) *WebsiteUpdate {
	wu.mutation.SetCreateID(s)
	return wu
}

// SetCreateTime sets the "create_time" field.
func (wu *WebsiteUpdate) SetCreateTime(t time.Time) *WebsiteUpdate {
	wu.mutation.SetCreateTime(t)
	return wu
}

// SetModifyID sets the "modify_id" field.
func (wu *WebsiteUpdate) SetModifyID(s string) *WebsiteUpdate {
	wu.mutation.SetModifyID(s)
	return wu
}

// SetModifyTime sets the "modify_time" field.
func (wu *WebsiteUpdate) SetModifyTime(t time.Time) *WebsiteUpdate {
	wu.mutation.SetModifyTime(t)
	return wu
}

// Mutation returns the WebsiteMutation object of the builder.
func (wu *WebsiteUpdate) Mutation() *WebsiteMutation {
	return wu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wu *WebsiteUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, WebsiteMutation](ctx, wu.sqlSave, wu.mutation, wu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WebsiteUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WebsiteUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WebsiteUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WebsiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(website.Table, website.Columns, sqlgraph.NewFieldSpec(website.FieldID, field.TypeInt32))
	if ps := wu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.SortID(); ok {
		_spec.SetField(website.FieldSortID, field.TypeInt8, value)
	}
	if value, ok := wu.mutation.AddedSortID(); ok {
		_spec.AddField(website.FieldSortID, field.TypeInt8, value)
	}
	if value, ok := wu.mutation.Category(); ok {
		_spec.SetField(website.FieldCategory, field.TypeInt8, value)
	}
	if value, ok := wu.mutation.AddedCategory(); ok {
		_spec.AddField(website.FieldCategory, field.TypeInt8, value)
	}
	if value, ok := wu.mutation.WebsiteName(); ok {
		_spec.SetField(website.FieldWebsiteName, field.TypeString, value)
	}
	if value, ok := wu.mutation.WebsiteIcon(); ok {
		_spec.SetField(website.FieldWebsiteIcon, field.TypeString, value)
	}
	if value, ok := wu.mutation.WebsiteURL(); ok {
		_spec.SetField(website.FieldWebsiteURL, field.TypeString, value)
	}
	if value, ok := wu.mutation.Summary(); ok {
		_spec.SetField(website.FieldSummary, field.TypeString, value)
	}
	if value, ok := wu.mutation.Description(); ok {
		_spec.SetField(website.FieldDescription, field.TypeString, value)
	}
	if value, ok := wu.mutation.CreateID(); ok {
		_spec.SetField(website.FieldCreateID, field.TypeString, value)
	}
	if value, ok := wu.mutation.CreateTime(); ok {
		_spec.SetField(website.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := wu.mutation.ModifyID(); ok {
		_spec.SetField(website.FieldModifyID, field.TypeString, value)
	}
	if value, ok := wu.mutation.ModifyTime(); ok {
		_spec.SetField(website.FieldModifyTime, field.TypeTime, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{website.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wu.mutation.done = true
	return n, nil
}

// WebsiteUpdateOne is the builder for updating a single Website entity.
type WebsiteUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebsiteMutation
}

// SetSortID sets the "sort_id" field.
func (wuo *WebsiteUpdateOne) SetSortID(i int8) *WebsiteUpdateOne {
	wuo.mutation.ResetSortID()
	wuo.mutation.SetSortID(i)
	return wuo
}

// AddSortID adds i to the "sort_id" field.
func (wuo *WebsiteUpdateOne) AddSortID(i int8) *WebsiteUpdateOne {
	wuo.mutation.AddSortID(i)
	return wuo
}

// SetCategory sets the "category" field.
func (wuo *WebsiteUpdateOne) SetCategory(i int8) *WebsiteUpdateOne {
	wuo.mutation.ResetCategory()
	wuo.mutation.SetCategory(i)
	return wuo
}

// AddCategory adds i to the "category" field.
func (wuo *WebsiteUpdateOne) AddCategory(i int8) *WebsiteUpdateOne {
	wuo.mutation.AddCategory(i)
	return wuo
}

// SetWebsiteName sets the "website_name" field.
func (wuo *WebsiteUpdateOne) SetWebsiteName(s string) *WebsiteUpdateOne {
	wuo.mutation.SetWebsiteName(s)
	return wuo
}

// SetWebsiteIcon sets the "website_icon" field.
func (wuo *WebsiteUpdateOne) SetWebsiteIcon(s string) *WebsiteUpdateOne {
	wuo.mutation.SetWebsiteIcon(s)
	return wuo
}

// SetWebsiteURL sets the "website_url" field.
func (wuo *WebsiteUpdateOne) SetWebsiteURL(s string) *WebsiteUpdateOne {
	wuo.mutation.SetWebsiteURL(s)
	return wuo
}

// SetSummary sets the "summary" field.
func (wuo *WebsiteUpdateOne) SetSummary(s string) *WebsiteUpdateOne {
	wuo.mutation.SetSummary(s)
	return wuo
}

// SetDescription sets the "description" field.
func (wuo *WebsiteUpdateOne) SetDescription(s string) *WebsiteUpdateOne {
	wuo.mutation.SetDescription(s)
	return wuo
}

// SetCreateID sets the "create_id" field.
func (wuo *WebsiteUpdateOne) SetCreateID(s string) *WebsiteUpdateOne {
	wuo.mutation.SetCreateID(s)
	return wuo
}

// SetCreateTime sets the "create_time" field.
func (wuo *WebsiteUpdateOne) SetCreateTime(t time.Time) *WebsiteUpdateOne {
	wuo.mutation.SetCreateTime(t)
	return wuo
}

// SetModifyID sets the "modify_id" field.
func (wuo *WebsiteUpdateOne) SetModifyID(s string) *WebsiteUpdateOne {
	wuo.mutation.SetModifyID(s)
	return wuo
}

// SetModifyTime sets the "modify_time" field.
func (wuo *WebsiteUpdateOne) SetModifyTime(t time.Time) *WebsiteUpdateOne {
	wuo.mutation.SetModifyTime(t)
	return wuo
}

// Mutation returns the WebsiteMutation object of the builder.
func (wuo *WebsiteUpdateOne) Mutation() *WebsiteMutation {
	return wuo.mutation
}

// Where appends a list predicates to the WebsiteUpdate builder.
func (wuo *WebsiteUpdateOne) Where(ps ...predicate.Website) *WebsiteUpdateOne {
	wuo.mutation.Where(ps...)
	return wuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wuo *WebsiteUpdateOne) Select(field string, fields ...string) *WebsiteUpdateOne {
	wuo.fields = append([]string{field}, fields...)
	return wuo
}

// Save executes the query and returns the updated Website entity.
func (wuo *WebsiteUpdateOne) Save(ctx context.Context) (*Website, error) {
	return withHooks[*Website, WebsiteMutation](ctx, wuo.sqlSave, wuo.mutation, wuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WebsiteUpdateOne) SaveX(ctx context.Context) *Website {
	node, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wuo *WebsiteUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WebsiteUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WebsiteUpdateOne) sqlSave(ctx context.Context) (_node *Website, err error) {
	_spec := sqlgraph.NewUpdateSpec(website.Table, website.Columns, sqlgraph.NewFieldSpec(website.FieldID, field.TypeInt32))
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Website.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, website.FieldID)
		for _, f := range fields {
			if !website.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != website.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wuo.mutation.SortID(); ok {
		_spec.SetField(website.FieldSortID, field.TypeInt8, value)
	}
	if value, ok := wuo.mutation.AddedSortID(); ok {
		_spec.AddField(website.FieldSortID, field.TypeInt8, value)
	}
	if value, ok := wuo.mutation.Category(); ok {
		_spec.SetField(website.FieldCategory, field.TypeInt8, value)
	}
	if value, ok := wuo.mutation.AddedCategory(); ok {
		_spec.AddField(website.FieldCategory, field.TypeInt8, value)
	}
	if value, ok := wuo.mutation.WebsiteName(); ok {
		_spec.SetField(website.FieldWebsiteName, field.TypeString, value)
	}
	if value, ok := wuo.mutation.WebsiteIcon(); ok {
		_spec.SetField(website.FieldWebsiteIcon, field.TypeString, value)
	}
	if value, ok := wuo.mutation.WebsiteURL(); ok {
		_spec.SetField(website.FieldWebsiteURL, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Summary(); ok {
		_spec.SetField(website.FieldSummary, field.TypeString, value)
	}
	if value, ok := wuo.mutation.Description(); ok {
		_spec.SetField(website.FieldDescription, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CreateID(); ok {
		_spec.SetField(website.FieldCreateID, field.TypeString, value)
	}
	if value, ok := wuo.mutation.CreateTime(); ok {
		_spec.SetField(website.FieldCreateTime, field.TypeTime, value)
	}
	if value, ok := wuo.mutation.ModifyID(); ok {
		_spec.SetField(website.FieldModifyID, field.TypeString, value)
	}
	if value, ok := wuo.mutation.ModifyTime(); ok {
		_spec.SetField(website.FieldModifyTime, field.TypeTime, value)
	}
	_node = &Website{config: wuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{website.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wuo.mutation.done = true
	return _node, nil
}
