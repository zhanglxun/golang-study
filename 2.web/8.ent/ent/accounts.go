// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"golangStudy/2.web/8.ent/ent/accounts"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Accounts is the model entity for the Accounts schema.
type Accounts struct {
	config `json:"-"`
	// ID of the ent.
	ID int32 `json:"id,omitempty"`
	// Account holds the value of the "account" field.
	Account string `json:"account,omitempty"`
	// Pwd holds the value of the "pwd" field.
	Pwd string `json:"pwd,omitempty"`
	// Nickname holds the value of the "nickname" field.
	Nickname string `json:"nickname,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Mobile holds the value of the "mobile" field.
	Mobile string `json:"mobile,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Accounts) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case accounts.FieldID:
			values[i] = new(sql.NullInt64)
		case accounts.FieldAccount, accounts.FieldPwd, accounts.FieldNickname, accounts.FieldEmail, accounts.FieldMobile:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Accounts", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Accounts fields.
func (a *Accounts) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case accounts.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int32(value.Int64)
		case accounts.FieldAccount:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field account", values[i])
			} else if value.Valid {
				a.Account = value.String
			}
		case accounts.FieldPwd:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field pwd", values[i])
			} else if value.Valid {
				a.Pwd = value.String
			}
		case accounts.FieldNickname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nickname", values[i])
			} else if value.Valid {
				a.Nickname = value.String
			}
		case accounts.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				a.Email = value.String
			}
		case accounts.FieldMobile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mobile", values[i])
			} else if value.Valid {
				a.Mobile = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Accounts.
// Note that you need to call Accounts.Unwrap() before calling this method if this Accounts
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Accounts) Update() *AccountsUpdateOne {
	return NewAccountsClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Accounts entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Accounts) Unwrap() *Accounts {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Accounts is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Accounts) String() string {
	var builder strings.Builder
	builder.WriteString("Accounts(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("account=")
	builder.WriteString(a.Account)
	builder.WriteString(", ")
	builder.WriteString("pwd=")
	builder.WriteString(a.Pwd)
	builder.WriteString(", ")
	builder.WriteString("nickname=")
	builder.WriteString(a.Nickname)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(a.Email)
	builder.WriteString(", ")
	builder.WriteString("mobile=")
	builder.WriteString(a.Mobile)
	builder.WriteByte(')')
	return builder.String()
}

// AccountsSlice is a parsable slice of Accounts.
type AccountsSlice []*Accounts
