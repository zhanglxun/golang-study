// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"golangStudy/2.web/8.ent/ent/cwebsite"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CWebsiteCreate is the builder for creating a CWebsite entity.
type CWebsiteCreate struct {
	config
	mutation *CWebsiteMutation
	hooks    []Hook
}

// SetSortID sets the "sort_id" field.
func (cc *CWebsiteCreate) SetSortID(i int32) *CWebsiteCreate {
	cc.mutation.SetSortID(i)
	return cc
}

// SetNillableSortID sets the "sort_id" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableSortID(i *int32) *CWebsiteCreate {
	if i != nil {
		cc.SetSortID(*i)
	}
	return cc
}

// SetCategory sets the "category" field.
func (cc *CWebsiteCreate) SetCategory(i int32) *CWebsiteCreate {
	cc.mutation.SetCategory(i)
	return cc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableCategory(i *int32) *CWebsiteCreate {
	if i != nil {
		cc.SetCategory(*i)
	}
	return cc
}

// SetType sets the "type" field.
func (cc *CWebsiteCreate) SetType(i int32) *CWebsiteCreate {
	cc.mutation.SetType(i)
	return cc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableType(i *int32) *CWebsiteCreate {
	if i != nil {
		cc.SetType(*i)
	}
	return cc
}

// SetWebsiteName sets the "website_name" field.
func (cc *CWebsiteCreate) SetWebsiteName(s string) *CWebsiteCreate {
	cc.mutation.SetWebsiteName(s)
	return cc
}

// SetNillableWebsiteName sets the "website_name" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableWebsiteName(s *string) *CWebsiteCreate {
	if s != nil {
		cc.SetWebsiteName(*s)
	}
	return cc
}

// SetWebsiteIcon sets the "website_icon" field.
func (cc *CWebsiteCreate) SetWebsiteIcon(s string) *CWebsiteCreate {
	cc.mutation.SetWebsiteIcon(s)
	return cc
}

// SetNillableWebsiteIcon sets the "website_icon" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableWebsiteIcon(s *string) *CWebsiteCreate {
	if s != nil {
		cc.SetWebsiteIcon(*s)
	}
	return cc
}

// SetWebsiteURL sets the "website_url" field.
func (cc *CWebsiteCreate) SetWebsiteURL(s string) *CWebsiteCreate {
	cc.mutation.SetWebsiteURL(s)
	return cc
}

// SetNillableWebsiteURL sets the "website_url" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableWebsiteURL(s *string) *CWebsiteCreate {
	if s != nil {
		cc.SetWebsiteURL(*s)
	}
	return cc
}

// SetSummary sets the "summary" field.
func (cc *CWebsiteCreate) SetSummary(s string) *CWebsiteCreate {
	cc.mutation.SetSummary(s)
	return cc
}

// SetNillableSummary sets the "summary" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableSummary(s *string) *CWebsiteCreate {
	if s != nil {
		cc.SetSummary(*s)
	}
	return cc
}

// SetDescription sets the "description" field.
func (cc *CWebsiteCreate) SetDescription(s string) *CWebsiteCreate {
	cc.mutation.SetDescription(s)
	return cc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableDescription(s *string) *CWebsiteCreate {
	if s != nil {
		cc.SetDescription(*s)
	}
	return cc
}

// SetCreateID sets the "create_id" field.
func (cc *CWebsiteCreate) SetCreateID(i int64) *CWebsiteCreate {
	cc.mutation.SetCreateID(i)
	return cc
}

// SetNillableCreateID sets the "create_id" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableCreateID(i *int64) *CWebsiteCreate {
	if i != nil {
		cc.SetCreateID(*i)
	}
	return cc
}

// SetCreateTime sets the "create_time" field.
func (cc *CWebsiteCreate) SetCreateTime(t time.Time) *CWebsiteCreate {
	cc.mutation.SetCreateTime(t)
	return cc
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableCreateTime(t *time.Time) *CWebsiteCreate {
	if t != nil {
		cc.SetCreateTime(*t)
	}
	return cc
}

// SetModifyID sets the "modify_id" field.
func (cc *CWebsiteCreate) SetModifyID(i int64) *CWebsiteCreate {
	cc.mutation.SetModifyID(i)
	return cc
}

// SetNillableModifyID sets the "modify_id" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableModifyID(i *int64) *CWebsiteCreate {
	if i != nil {
		cc.SetModifyID(*i)
	}
	return cc
}

// SetModifyTime sets the "modify_time" field.
func (cc *CWebsiteCreate) SetModifyTime(t time.Time) *CWebsiteCreate {
	cc.mutation.SetModifyTime(t)
	return cc
}

// SetNillableModifyTime sets the "modify_time" field if the given value is not nil.
func (cc *CWebsiteCreate) SetNillableModifyTime(t *time.Time) *CWebsiteCreate {
	if t != nil {
		cc.SetModifyTime(*t)
	}
	return cc
}

// SetID sets the "id" field.
func (cc *CWebsiteCreate) SetID(i int64) *CWebsiteCreate {
	cc.mutation.SetID(i)
	return cc
}

// Mutation returns the CWebsiteMutation object of the builder.
func (cc *CWebsiteCreate) Mutation() *CWebsiteMutation {
	return cc.mutation
}

// Save creates the CWebsite in the database.
func (cc *CWebsiteCreate) Save(ctx context.Context) (*CWebsite, error) {
	cc.defaults()
	return withHooks[*CWebsite, CWebsiteMutation](ctx, cc.sqlSave, cc.mutation, cc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (cc *CWebsiteCreate) SaveX(ctx context.Context) *CWebsite {
	v, err := cc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cc *CWebsiteCreate) Exec(ctx context.Context) error {
	_, err := cc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cc *CWebsiteCreate) ExecX(ctx context.Context) {
	if err := cc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cc *CWebsiteCreate) defaults() {
	if _, ok := cc.mutation.CreateTime(); !ok {
		v := cwebsite.DefaultCreateTime()
		cc.mutation.SetCreateTime(v)
	}
	if _, ok := cc.mutation.ModifyTime(); !ok {
		v := cwebsite.DefaultModifyTime()
		cc.mutation.SetModifyTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cc *CWebsiteCreate) check() error {
	return nil
}

func (cc *CWebsiteCreate) sqlSave(ctx context.Context) (*CWebsite, error) {
	if err := cc.check(); err != nil {
		return nil, err
	}
	_node, _spec := cc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	cc.mutation.id = &_node.ID
	cc.mutation.done = true
	return _node, nil
}

func (cc *CWebsiteCreate) createSpec() (*CWebsite, *sqlgraph.CreateSpec) {
	var (
		_node = &CWebsite{config: cc.config}
		_spec = sqlgraph.NewCreateSpec(cwebsite.Table, sqlgraph.NewFieldSpec(cwebsite.FieldID, field.TypeInt64))
	)
	if id, ok := cc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cc.mutation.SortID(); ok {
		_spec.SetField(cwebsite.FieldSortID, field.TypeInt32, value)
		_node.SortID = value
	}
	if value, ok := cc.mutation.Category(); ok {
		_spec.SetField(cwebsite.FieldCategory, field.TypeInt32, value)
		_node.Category = value
	}
	if value, ok := cc.mutation.GetType(); ok {
		_spec.SetField(cwebsite.FieldType, field.TypeInt32, value)
		_node.Type = value
	}
	if value, ok := cc.mutation.WebsiteName(); ok {
		_spec.SetField(cwebsite.FieldWebsiteName, field.TypeString, value)
		_node.WebsiteName = value
	}
	if value, ok := cc.mutation.WebsiteIcon(); ok {
		_spec.SetField(cwebsite.FieldWebsiteIcon, field.TypeString, value)
		_node.WebsiteIcon = value
	}
	if value, ok := cc.mutation.WebsiteURL(); ok {
		_spec.SetField(cwebsite.FieldWebsiteURL, field.TypeString, value)
		_node.WebsiteURL = value
	}
	if value, ok := cc.mutation.Summary(); ok {
		_spec.SetField(cwebsite.FieldSummary, field.TypeString, value)
		_node.Summary = value
	}
	if value, ok := cc.mutation.Description(); ok {
		_spec.SetField(cwebsite.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := cc.mutation.CreateID(); ok {
		_spec.SetField(cwebsite.FieldCreateID, field.TypeInt64, value)
		_node.CreateID = value
	}
	if value, ok := cc.mutation.CreateTime(); ok {
		_spec.SetField(cwebsite.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := cc.mutation.ModifyID(); ok {
		_spec.SetField(cwebsite.FieldModifyID, field.TypeInt64, value)
		_node.ModifyID = value
	}
	if value, ok := cc.mutation.ModifyTime(); ok {
		_spec.SetField(cwebsite.FieldModifyTime, field.TypeTime, value)
		_node.ModifyTime = value
	}
	return _node, _spec
}

// CWebsiteCreateBulk is the builder for creating many CWebsite entities in bulk.
type CWebsiteCreateBulk struct {
	config
	builders []*CWebsiteCreate
}

// Save creates the CWebsite entities in the database.
func (ccb *CWebsiteCreateBulk) Save(ctx context.Context) ([]*CWebsite, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ccb.builders))
	nodes := make([]*CWebsite, len(ccb.builders))
	mutators := make([]Mutator, len(ccb.builders))
	for i := range ccb.builders {
		func(i int, root context.Context) {
			builder := ccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CWebsiteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ccb *CWebsiteCreateBulk) SaveX(ctx context.Context) []*CWebsite {
	v, err := ccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccb *CWebsiteCreateBulk) Exec(ctx context.Context) error {
	_, err := ccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccb *CWebsiteCreateBulk) ExecX(ctx context.Context) {
	if err := ccb.Exec(ctx); err != nil {
		panic(err)
	}
}
